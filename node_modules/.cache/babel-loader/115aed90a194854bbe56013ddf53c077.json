{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { appendClassName, getUrlSanitizer } from \"./view-helpers\";\nimport { isFieldValueWrapper } from \"./types/FieldValueWrapper\";\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n  return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n  return String(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  var safeField = getSnippet(result, field) || htmlEscape(getRaw(result, field));\n  return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce(function (acc, field) {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    if (!isFieldValueWrapper(result[field])) return acc;\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, field, getEscapedField(result, field)));\n  }, {});\n}\n\nfunction Result(_ref) {\n  var className = _ref.className,\n      result = _ref.result,\n      onClickLink = _ref.onClickLink,\n      titleField = _ref.titleField,\n      urlField = _ref.urlField,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"result\", \"onClickLink\", \"titleField\", \"urlField\"]);\n\n  var fields = getEscapedFields(result);\n  var title = getEscapedField(result, titleField);\n  var url = getUrlSanitizer(URL, location)(getRaw(result, urlField));\n  return /*#__PURE__*/React.createElement(\"li\", _extends({\n    className: appendClassName(\"sui-result\", className)\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__header\"\n  }, title && !url && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-result__title\",\n    dangerouslySetInnerHTML: {\n      __html: title\n    }\n  }), title && url && /*#__PURE__*/React.createElement(\"a\", {\n    className: \"sui-result__title sui-result__title-link\",\n    dangerouslySetInnerHTML: {\n      __html: title\n    },\n    href: url,\n    onClick: onClickLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__body\"\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"sui-result__details\"\n  }, Object.entries(fields).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        fieldName = _ref3[0],\n        fieldValue = _ref3[1];\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fieldName\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sui-result__key\"\n    }, fieldName), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sui-result__value\",\n      dangerouslySetInnerHTML: {\n        __html: fieldValue\n      }\n    }));\n  }))));\n}\n\nResult.propTypes = {\n  result: PropTypes.object.isRequired,\n  onClickLink: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  titleField: PropTypes.string,\n  urlField: PropTypes.string\n};\nexport default Result;","map":{"version":3,"sources":["../src/Result.js"],"names":["result","getFieldType","String","safeField","getSnippet","htmlEscape","getRaw","Array","isFieldValueWrapper","getEscapedField","className","onClickLink","titleField","urlField","rest","fields","getEscapedFields","title","url","getUrlSanitizer","appendClassName","__html","fieldName","fieldValue","Result","PropTypes","string"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { appendClassName, getUrlSanitizer } from \"./view-helpers\";\nimport { isFieldValueWrapper } from \"./types/FieldValueWrapper\";\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n  return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n\n  return String(str)\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  const safeField =\n    getSnippet(result, field) || htmlEscape(getRaw(result, field));\n  return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce((acc, field) => {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    if (!isFieldValueWrapper(result[field])) return acc;\n    return { ...acc, [field]: getEscapedField(result, field) };\n  }, {});\n}\n\nfunction Result({\n  className,\n  result,\n  onClickLink,\n  titleField,\n  urlField,\n  ...rest\n}) {\n  const fields = getEscapedFields(result);\n  const title = getEscapedField(result, titleField);\n  const url = getUrlSanitizer(URL, location)(getRaw(result, urlField));\n\n  return (\n    <li className={appendClassName(\"sui-result\", className)} {...rest}>\n      <div className=\"sui-result__header\">\n        {title && !url && (\n          <span\n            className=\"sui-result__title\"\n            dangerouslySetInnerHTML={{ __html: title }}\n          />\n        )}\n        {title && url && (\n          <a\n            className=\"sui-result__title sui-result__title-link\"\n            dangerouslySetInnerHTML={{ __html: title }}\n            href={url}\n            onClick={onClickLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          />\n        )}\n      </div>\n      <div className=\"sui-result__body\">\n        <ul className=\"sui-result__details\">\n          {Object.entries(fields).map(([fieldName, fieldValue]) => (\n            <li key={fieldName}>\n              <span className=\"sui-result__key\">{fieldName}</span>{\" \"}\n              <span\n                className=\"sui-result__value\"\n                dangerouslySetInnerHTML={{ __html: fieldValue }}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </li>\n  );\n}\n\nResult.propTypes = {\n  result: PropTypes.object.isRequired,\n  onClickLink: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  titleField: PropTypes.string,\n  urlField: PropTypes.string\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}