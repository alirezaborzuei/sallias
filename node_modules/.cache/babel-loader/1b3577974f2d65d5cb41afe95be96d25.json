{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function setFilter(name, value) {\n  var _console;\n\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\"; // eslint-disable-next-line no-console\n\n  if (this.debug) (_console = console).log.apply(_console, [\"Search UI: Action\", \"setFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  filters = filters.filter(function (filter) {\n    return filter.field !== name || filter.type !== type;\n  });\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [].concat(_toConsumableArray(filters), [{\n      field: name,\n      values: [value],\n      type: type\n    }])\n  });\n}","map":{"version":3,"sources":["../../src/actions/setFilter.js"],"names":["type","filters","filter","current","field","values"],"mappings":";AAAA;;;;;;;;;;AASA,eAAe,SAAA,SAAA,CAAA,IAAA,EAAA,KAAA,EAA8C;AAAA,MAAA,QAAA;;AAAA,MAAdA,IAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO,CAAA,CAC3D;;AACA,MAAI,KAAJ,KAAA,EAAgB,CAAA,QAAA,GAAA,OAAA,EAAA,GAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,mBAAA,EAAA,WAAA,EAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;AAF2C,MAIrDC,OAJqD,GAIzC,KAJyC,KAIzC,CAJyC,OAAA;AAK3DA,EAAAA,OAAO,GAAG,OAAO,CAAP,MAAA,CACR,UAAA,MAAA,EAAM;AAAA,WAAIC,MAAM,CAANA,KAAAA,KAAAA,IAAAA,IAAyBA,MAAM,CAANA,IAAAA,KAA7B,IAAA;AADRD,GAAU,CAAVA;;AAIA,OAAA,oBAAA,CAA0B;AACxBE,IAAAA,OAAO,EADiB,CAAA;AAExBF,IAAAA,OAAO,EAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,OAAA,CAAA,EAAA,CAEL;AACEG,MAAAA,KAAK,EADP,IAAA;AAEEC,MAAAA,MAAM,EAAE,CAFV,KAEU,CAFV;AAGEL,MAAAA,IAAI,EAAJA;AAHF,KAFK,CAAA;AAFiB,GAA1B;AAWD","sourcesContent":["/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\nexport default function setFilter(name, value, type = \"all\") {\n  // eslint-disable-next-line no-console\n  if (this.debug) console.log(\"Search UI: Action\", \"setFilter\", ...arguments);\n\n  let { filters } = this.state;\n  filters = filters.filter(\n    filter => filter.field !== name || filter.type !== type\n  );\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [\n      ...filters,\n      {\n        field: name,\n        values: [value],\n        type\n      }\n    ]\n  });\n}\n"]},"metadata":{},"sourceType":"module"}