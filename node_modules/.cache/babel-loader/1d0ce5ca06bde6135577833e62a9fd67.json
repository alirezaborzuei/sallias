{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction adaptation1AdaptFacetValue(facetValue) {\n  var additionalFacetValueFieldsForField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hasValue = facetValue.hasOwnProperty(\"value\");\n\n  var count = facetValue.count,\n      value = facetValue.value,\n      rest = _objectWithoutProperties(facetValue, [\"count\", \"value\"]);\n\n  return {\n    count: count,\n    value: hasValue ? value : _objectSpread(_objectSpread({}, rest), additionalFacetValueFieldsForField)\n  };\n}\n\nfunction adaptation2AddLabelToFacet(fieldName, facet) {\n  return _objectSpread({\n    field: fieldName\n  }, facet);\n}\n\nfunction adaptFacets(facets, _ref) {\n  var _ref$additionalFacetV = _ref.additionalFacetValueFields,\n      additionalFacetValueFields = _ref$additionalFacetV === void 0 ? {} : _ref$additionalFacetV;\n  if (!facets || Object.keys(facets).length === 0) return facets;\n  return Object.entries(facets).reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        fieldName = _ref3[0],\n        facet = _ref3[1];\n\n    var adaptedFacet = facet.map(function (v) {\n      var type = v.type,\n          data = v.data,\n          rest = _objectWithoutProperties(v, [\"type\", \"data\"]);\n\n      return adaptation2AddLabelToFacet(fieldName, _objectSpread({\n        type: type,\n        data: data.map(function (f) {\n          return adaptation1AdaptFacetValue(f, additionalFacetValueFields[fieldName]);\n        })\n      }, rest));\n    });\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, fieldName, adaptedFacet));\n  }, {});\n}\n\nfunction limitTo100pages(totalPages) {\n  // We limit this to 100 pages since App Search currently cannot page past 100 pages\n  return Math.min(totalPages, 100);\n}\n\nexport function adaptResponse(response) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var facets = response.info.facets;\n  var requestId = response.info.meta.request_id;\n  var totalPages = response.info.meta.page && typeof response.info.meta.page.total_pages !== \"undefined\" ? limitTo100pages(response.info.meta.page.total_pages) : undefined;\n  var totalResults = response.info.meta.page ? response.info.meta.page.total_results : undefined;\n  return _objectSpread(_objectSpread(_objectSpread({}, facets && {\n    facets: adaptFacets(facets, options)\n  }), {}, {\n    requestId: requestId,\n    results: response.rawResults\n  }, totalPages !== undefined && {\n    totalPages: totalPages\n  }), totalResults !== undefined && {\n    totalResults: totalResults\n  });\n}","map":{"version":3,"sources":["../src/responseAdapter.js"],"names":["additionalFacetValueFieldsForField","hasValue","facetValue","count","value","rest","field","fieldName","additionalFacetValueFields","Object","facet","adaptedFacet","type","data","v","adaptation2AddLabelToFacet","adaptation1AdaptFacetValue","Math","options","facets","response","requestId","totalPages","limitTo100pages","totalResults","adaptFacets","results","rawResults"],"mappings":"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","sourcesContent":["function adaptation1AdaptFacetValue(\n  facetValue,\n  additionalFacetValueFieldsForField = {}\n) {\n  const hasValue = facetValue.hasOwnProperty(\"value\");\n  const { count, value, ...rest } = facetValue;\n  return {\n    count,\n    value: hasValue\n      ? value\n      : {\n          ...rest,\n          ...additionalFacetValueFieldsForField\n        }\n  };\n}\n\nfunction adaptation2AddLabelToFacet(fieldName, facet) {\n  return {\n    field: fieldName,\n    ...facet\n  };\n}\n\nfunction adaptFacets(facets, { additionalFacetValueFields = {} }) {\n  if (!facets || Object.keys(facets).length === 0) return facets;\n\n  return Object.entries(facets).reduce((acc, [fieldName, facet]) => {\n    const adaptedFacet = facet.map(v => {\n      const { type, data, ...rest } = v;\n      return adaptation2AddLabelToFacet(fieldName, {\n        type,\n        data: data.map(f =>\n          adaptation1AdaptFacetValue(f, additionalFacetValueFields[fieldName])\n        ),\n        ...rest\n      });\n    });\n\n    return {\n      ...acc,\n      [fieldName]: adaptedFacet\n    };\n  }, {});\n}\n\nfunction limitTo100pages(totalPages) {\n  // We limit this to 100 pages since App Search currently cannot page past 100 pages\n  return Math.min(totalPages, 100);\n}\n\nexport function adaptResponse(response, options = {}) {\n  const facets = response.info.facets;\n  const requestId = response.info.meta.request_id;\n\n  const totalPages =\n    response.info.meta.page &&\n    typeof response.info.meta.page.total_pages !== \"undefined\"\n      ? limitTo100pages(response.info.meta.page.total_pages)\n      : undefined;\n\n  const totalResults = response.info.meta.page\n    ? response.info.meta.page.total_results\n    : undefined;\n\n  return {\n    ...(facets && { facets: adaptFacets(facets, options) }),\n    requestId,\n    results: response.rawResults,\n    ...(totalPages !== undefined && { totalPages }),\n    ...(totalResults !== undefined && { totalResults })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}