{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport FieldValueWrapper from \"./FieldValueWrapper\"; // Typically an object where keys are the field names, and values are field values.\n// Also could be literally any other arbitrary value depending on the particular Search API response.\n// Default views in Search UI know what to do with FieldValueWrapper values, but not arbitrary values, so it\n// is usually better to work with FieldValueWrapper values. We encourage FieldValueWrapper, but we accept\n// anything because we don't want users to have type error warnings unnecessarily.\n//\n// An example would be if a user requests \"grouping\" in an App Search API request. That will come back\n// as \"_group: {..}\". It *should* be there in the Result so that a developer has it available to work\n// with.\n\nexport default PropTypes.objectOf(PropTypes.oneOfType([PropTypes.any, FieldValueWrapper]));","map":{"version":3,"sources":["../../src/types/Result.js"],"names":["PropTypes"],"mappings":"AAAA,OAAA,SAAA,MAAA,YAAA;AAEA,OAAA,iBAAA,MAAA,qBAAA,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeA,SAAS,CAATA,QAAAA,CACbA,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,GAAA,EADtB,iBACsB,CAApBA,CADaA,CAAf","sourcesContent":["import PropTypes from \"prop-types\";\n\nimport FieldValueWrapper from \"./FieldValueWrapper\";\n\n// Typically an object where keys are the field names, and values are field values.\n// Also could be literally any other arbitrary value depending on the particular Search API response.\n// Default views in Search UI know what to do with FieldValueWrapper values, but not arbitrary values, so it\n// is usually better to work with FieldValueWrapper values. We encourage FieldValueWrapper, but we accept\n// anything because we don't want users to have type error warnings unnecessarily.\n//\n// An example would be if a user requests \"grouping\" in an App Search API request. That will come back\n// as \"_group: {..}\". It *should* be there in the Result so that a developer has it available to work\n// with.\nexport default PropTypes.objectOf(\n  PropTypes.oneOfType([PropTypes.any, FieldValueWrapper])\n);\n"]},"metadata":{},"sourceType":"module"}