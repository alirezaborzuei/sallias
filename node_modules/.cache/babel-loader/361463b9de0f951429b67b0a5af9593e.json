{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\n\nfunction wireUpEventHandler(handlerName, apiConnector, handlerParam) {\n  if (handlerParam) {\n    // Passes a 'next' parameter which allows a handler to work as\n    // middleware for a connector\n    if (apiConnector) {\n      var next = apiConnector[handlerName].bind(apiConnector);\n      return function () {\n        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n          params[_key] = arguments[_key];\n        }\n\n        return handlerParam.apply(void 0, params.concat([next]));\n      };\n    }\n\n    return handlerParam;\n  }\n\n  if (apiConnector && apiConnector[handlerName]) return apiConnector[handlerName].bind(apiConnector);\n  return function () {\n    throw \"No \".concat(handlerName, \" handler provided and no Connector provided. You must configure one or the other.\");\n  };\n}\n/*\n * This class encapsulates the logic for Events. Events are events that occur\n * within Search UI that require integration with an external service to\n * either fetch / search for data, or notify analytics services of interesting\n * events that occur within a UI.\n *\n * Handlers for these events can either be passed directly, or by providing\n * an API Connector. The events that are passed directly can also be used\n * to override or proxy handlers provided by API Connectors.\n */\n\n\nvar Events = function Events() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      apiConnector = _ref.apiConnector,\n      onSearch = _ref.onSearch,\n      onAutocomplete = _ref.onAutocomplete,\n      onResultClick = _ref.onResultClick,\n      onAutocompleteResultClick = _ref.onAutocompleteResultClick;\n\n  _classCallCheck(this, Events);\n\n  this.search = wireUpEventHandler(\"onSearch\", apiConnector, onSearch);\n  this.autocomplete = wireUpEventHandler(\"onAutocomplete\", apiConnector, onAutocomplete);\n  this.resultClick = wireUpEventHandler(\"onResultClick\", apiConnector, onResultClick);\n  this.autocompleteResultClick = wireUpEventHandler(\"onAutocompleteResultClick\", apiConnector, onAutocompleteResultClick);\n};\n\nexport { Events as default };","map":{"version":3,"sources":["../src/Events.js"],"names":["next","apiConnector","params","handlerParam","Events","onSearch","onAutocomplete","onResultClick","onAutocompleteResultClick","wireUpEventHandler"],"mappings":";;AAAA,SAAA,kBAAA,CAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAAqE;AACnE,MAAA,YAAA,EAAkB;AAChB;AACA;AACA,QAAA,YAAA,EAAkB;AAChB,UAAMA,IAAI,GAAGC,YAAY,CAAZA,WAAY,CAAZA,CAAAA,IAAAA,CAAb,YAAaA,CAAb;AACA,aAAO,YAAe;AAAA,aAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAXC,MAAW,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAXA,UAAAA,MAAW,CAAA,IAAA,CAAXA,GAAW,SAAA,CAAA,IAAA,CAAXA;AAAW;;AACpB,eAAOC,YAAY,CAAZA,KAAAA,CAAAA,KAAAA,CAAAA,EAAgBD,MAAhBC,CAAAA,MAAgBD,CAAhBC,CAAP,IAAOA,CAAgBD,CAAhBC,CAAP;AADF,OAAA;AAGD;;AACD,WAAA,YAAA;AACD;;AACD,MAAIF,YAAY,IAAIA,YAAY,CAAhC,WAAgC,CAAhC,EACE,OAAOA,YAAY,CAAZA,WAAY,CAAZA,CAAAA,IAAAA,CAAP,YAAOA,CAAP;AACF,SAAO,YAAM;AACX,UAAA,MAAA,MAAA,CAAA,WAAA,EAAA,mFAAA,CAAA;AADF,GAAA;AAGD;AAED;;;;;;;;;;;;IAUqBG,M,GACnB,SAAA,MAAA,GAMQ;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,MALNH,YAKM,GAAA,IAAA,CALNA,YAKM;AAAA,MAJNI,QAIM,GAAA,IAAA,CAJNA,QAIM;AAAA,MAHNC,cAGM,GAAA,IAAA,CAHNA,cAGM;AAAA,MAFNC,aAEM,GAAA,IAAA,CAFNA,aAEM;AAAA,MADNC,yBACM,GAAA,IAAA,CADNA,yBACM;;AAAA,EAAA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AACN,OAAA,MAAA,GAAcC,kBAAkB,CAAA,UAAA,EAAA,YAAA,EAAhC,QAAgC,CAAhC;AACA,OAAA,YAAA,GAAoBA,kBAAkB,CAAA,gBAAA,EAAA,YAAA,EAAtC,cAAsC,CAAtC;AAKA,OAAA,WAAA,GAAmBA,kBAAkB,CAAA,eAAA,EAAA,YAAA,EAArC,aAAqC,CAArC;AAKA,OAAA,uBAAA,GAA+BA,kBAAkB,CAAA,2BAAA,EAAA,YAAA,EAAjD,yBAAiD,CAAjD;;;SAnBiBL,M","sourcesContent":["function wireUpEventHandler(handlerName, apiConnector, handlerParam) {\n  if (handlerParam) {\n    // Passes a 'next' parameter which allows a handler to work as\n    // middleware for a connector\n    if (apiConnector) {\n      const next = apiConnector[handlerName].bind(apiConnector);\n      return (...params) => {\n        return handlerParam(...params, next);\n      };\n    }\n    return handlerParam;\n  }\n  if (apiConnector && apiConnector[handlerName])\n    return apiConnector[handlerName].bind(apiConnector);\n  return () => {\n    throw `No ${handlerName} handler provided and no Connector provided. You must configure one or the other.`;\n  };\n}\n\n/*\n * This class encapsulates the logic for Events. Events are events that occur\n * within Search UI that require integration with an external service to\n * either fetch / search for data, or notify analytics services of interesting\n * events that occur within a UI.\n *\n * Handlers for these events can either be passed directly, or by providing\n * an API Connector. The events that are passed directly can also be used\n * to override or proxy handlers provided by API Connectors.\n */\nexport default class Events {\n  constructor({\n    apiConnector,\n    onSearch,\n    onAutocomplete,\n    onResultClick,\n    onAutocompleteResultClick\n  } = {}) {\n    this.search = wireUpEventHandler(\"onSearch\", apiConnector, onSearch);\n    this.autocomplete = wireUpEventHandler(\n      \"onAutocomplete\",\n      apiConnector,\n      onAutocomplete\n    );\n    this.resultClick = wireUpEventHandler(\n      \"onResultClick\",\n      apiConnector,\n      onResultClick\n    );\n    this.autocompleteResultClick = wireUpEventHandler(\n      \"onAutocompleteResultClick\",\n      apiConnector,\n      onAutocompleteResultClick\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}