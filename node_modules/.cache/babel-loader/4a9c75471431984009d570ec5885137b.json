{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\nimport { FacetValue } from \"./types\";\nimport { getFilterValueDisplay } from \"./view-helpers\";\nimport { appendClassName } from \"./view-helpers\";\n\nfunction Option(props) {\n  return /*#__PURE__*/React.createElement(components.Option, props, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-select__option-label\"\n  }, props.data.label), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-select__option-count\"\n  }, props.data.count.toLocaleString(\"en\")));\n}\n\nOption.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nfunction toSelectBoxOption(filterValue) {\n  return {\n    value: filterValue.value,\n    label: getFilterValueDisplay(filterValue.value),\n    count: filterValue.count\n  };\n}\n\nvar setDefaultStyle = {\n  option: function option() {\n    return {};\n  },\n  control: function control() {\n    return {};\n  },\n  dropdownIndicator: function dropdownIndicator() {\n    return {};\n  },\n  indicatorSeparator: function indicatorSeparator() {\n    return {};\n  }\n};\n\nfunction SingleSelectFacet(_ref) {\n  var className = _ref.className,\n      label = _ref.label,\n      _onChange = _ref.onChange,\n      options = _ref.options;\n  var selectedSelectBoxOption;\n  var isSelectedSelectBoxOptionSet = false;\n  var selectBoxOptions = options.map(function (option) {\n    var selectBoxOption = toSelectBoxOption(option); // There should never be multiple filters set for this facet because it is single select,\n    // but if there is, we use the first value.\n\n    if (option.selected && !isSelectedSelectBoxOptionSet) {\n      selectedSelectBoxOption = selectBoxOption;\n      isSelectedSelectBoxOptionSet = true;\n    }\n\n    return selectBoxOption;\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: appendClassName(\"sui-facet\", className)\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-facet__title\"\n  }, label), /*#__PURE__*/React.createElement(Select, {\n    className: \"sui-select\",\n    classNamePrefix: \"sui-select\",\n    components: {\n      Option: Option\n    },\n    value: selectedSelectBoxOption,\n    onChange: function onChange(o) {\n      return _onChange(o.value);\n    },\n    options: selectBoxOptions,\n    isSearchable: false,\n    styles: setDefaultStyle\n  }));\n}\n\nSingleSelectFacet.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(FacetValue).isRequired,\n  className: PropTypes.string\n};\nexport default SingleSelectFacet;","map":{"version":3,"sources":["../src/SingleSelectFacet.js"],"names":["props","Option","data","PropTypes","isRequired","value","filterValue","label","getFilterValueDisplay","count","setDefaultStyle","option","control","dropdownIndicator","indicatorSeparator","className","onChange","options","isSelectedSelectBoxOptionSet","selectBoxOptions","selectBoxOption","toSelectBoxOption","selectedSelectBoxOption","appendClassName","o","SingleSelectFacet","string"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\n\nimport { FacetValue } from \"./types\";\nimport { getFilterValueDisplay } from \"./view-helpers\";\nimport { appendClassName } from \"./view-helpers\";\n\nfunction Option(props) {\n  return (\n    <components.Option {...props}>\n      <span className=\"sui-select__option-label\">{props.data.label}</span>\n      <span className=\"sui-select__option-count\">\n        {props.data.count.toLocaleString(\"en\")}\n      </span>\n    </components.Option>\n  );\n}\n\nOption.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nfunction toSelectBoxOption(filterValue) {\n  return {\n    value: filterValue.value,\n    label: getFilterValueDisplay(filterValue.value),\n    count: filterValue.count\n  };\n}\n\nconst setDefaultStyle = {\n  option: () => ({}),\n  control: () => ({}),\n  dropdownIndicator: () => ({}),\n  indicatorSeparator: () => ({})\n};\n\nfunction SingleSelectFacet({ className, label, onChange, options }) {\n  let selectedSelectBoxOption;\n  let isSelectedSelectBoxOptionSet = false;\n\n  const selectBoxOptions = options.map(option => {\n    const selectBoxOption = toSelectBoxOption(option);\n    // There should never be multiple filters set for this facet because it is single select,\n    // but if there is, we use the first value.\n    if (option.selected && !isSelectedSelectBoxOptionSet) {\n      selectedSelectBoxOption = selectBoxOption;\n      isSelectedSelectBoxOptionSet = true;\n    }\n    return selectBoxOption;\n  });\n\n  return (\n    <div className={appendClassName(\"sui-facet\", className)}>\n      <div className=\"sui-facet__title\">{label}</div>\n      <Select\n        className=\"sui-select\"\n        classNamePrefix=\"sui-select\"\n        components={{ Option }}\n        value={selectedSelectBoxOption}\n        onChange={o => onChange(o.value)}\n        options={selectBoxOptions}\n        isSearchable={false}\n        styles={setDefaultStyle}\n      />\n    </div>\n  );\n}\n\nSingleSelectFacet.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(FacetValue).isRequired,\n  className: PropTypes.string\n};\n\nexport default SingleSelectFacet;\n"]},"metadata":{},"sourceType":"module"}