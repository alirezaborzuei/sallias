{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from \"react\";\nimport SearchContext from \"./SearchContext\";\n\nfunction buildContextForProps(context) {\n  return _objectSpread(_objectSpread({}, context.driver.getState()), context.driver.getActions());\n}\n/* For a given object execute mapContextToProps to pluck out the relevant\nproperties */\n\n\nfunction giveMeJustWhatINeeded(stateOrContext, mapContextToProps, props) {\n  var mapContextToPropsToUse = props.mapContextToProps || mapContextToProps;\n  return mapContextToPropsToUse(stateOrContext, props) || {};\n}\n/**\n * This is a Higher Order Component that wraps a component and injects state and actions from Search UI, effectively\n * \"connecting\" it to Search UI.\n *\n * Components using `withSearch` will be \"Pure\" components.\n * It is important to understand the implications of using a PureComponent, as described here:\n * https://reactjs.org/docs/optimizing-performance.html#examples\n *\n * @param Function mapContextToProps A function that accepts the context and allows you to pick the values to be passed as props\n * into the component. This allows you to \"select\" which values from the context to use.\n * @param Function Component\n */\n\n\nexport default function withSearch(mapContextToProps) {\n  if (!mapContextToProps) {\n    throw \"withSearch requires a function to be provided which returns an object with at least one value.\";\n  }\n\n  return function (Component) {\n    var WithSearch = /*#__PURE__*/function (_React$PureComponent) {\n      _inherits(WithSearch, _React$PureComponent);\n\n      var _super = _createSuper(WithSearch);\n\n      function WithSearch(props, context) {\n        var _this;\n\n        _classCallCheck(this, WithSearch);\n\n        _this = _super.call(this);\n\n        _defineProperty(_assertThisInitialized(_this), \"subscription\", function (state) {\n          if (_this.unmounted) return;\n\n          _this.setState(function (prevState) {\n            return giveMeJustWhatINeeded(_objectSpread(_objectSpread({}, prevState), state), mapContextToProps, _this.props);\n          });\n        });\n\n        _this.state = _objectSpread({}, giveMeJustWhatINeeded(buildContextForProps(context), // eslint-disable-next-line react/prop-types\n        mapContextToProps, props)); // Note that we subscribe to changes at the component level, rather than\n        // at the top level Provider, so that we are re-rendering the entire\n        // subtree when state changes in the Provider.\n\n        context.driver.subscribeToStateChanges(_this.subscription);\n        return _this;\n      }\n\n      _createClass(WithSearch, [{\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          this.unmounted = true;\n          this.context.driver.unsubscribeToStateChanges(this.subscription);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          // eslint-disable-next-line react/prop-types\n          var rest = _extends({}, this.props);\n\n          return /*#__PURE__*/React.createElement(Component, _extends({}, this.state, rest));\n        }\n      }]);\n\n      return WithSearch;\n    }(React.PureComponent);\n\n    WithSearch.contextType = SearchContext;\n    return WithSearch;\n  };\n}","map":{"version":3,"sources":["../src/withSearch.js"],"names":["context","mapContextToPropsToUse","props","WithSearch","React","giveMeJustWhatINeeded","buildContextForProps","rest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAA,aAAA,MAAA,iBAAA;;AAEA,SAAA,oBAAA,CAAA,OAAA,EAAuC;AACrC,SAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACKA,OAAO,CAAPA,MAAAA,CADL,QACKA,EADL,CAAA,EAEKA,OAAO,CAAPA,MAAAA,CAFL,UAEKA,EAFL,CAAA;AAID;AAED;;;;AAEA,SAAA,qBAAA,CAAA,cAAA,EAAA,iBAAA,EAAA,KAAA,EAAyE;AACvE,MAAMC,sBAAsB,GAAGC,KAAK,CAALA,iBAAAA,IAA/B,iBAAA;AACA,SAAOD,sBAAsB,CAAA,cAAA,EAAtBA,KAAsB,CAAtBA,IAAP,EAAA;AACD;AAED;;;;;;;;;;;;;;AAYA,eAAe,SAAA,UAAA,CAAA,iBAAA,EAAuC;AACpD,MAAI,CAAJ,iBAAA,EAAwB;AACtB,UAAA,gGAAA;AACD;;AAED,SAAO,UAAA,SAAA,EAAoB;AAAA,QACnBE,UADmB,GAAA,aAAA,UAAA,oBAAA,EAAA;AAAA,MAAA,SAAA,CAAA,UAAA,EAAA,oBAAA,CAAA;;AAAA,UAAA,MAAA,GAAA,YAAA,CAAA,UAAA,CAAA;;AAEvB,eAAA,UAAA,CAAA,KAAA,EAAA,OAAA,EAA4B;AAAA,YAAA,KAAA;;AAAA,QAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;;AAC1B,QAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;;AAD0B,QAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,cAAA,EAsBb,UAAA,KAAA,EAAS;AACtB,cAAI,KAAA,CAAJ,SAAA,EAAoB;;AACpB,UAAA,KAAA,CAAA,QAAA,CAAc,UAAA,SAAA,EAAS;AAAA,mBACrBE,qBAAqB,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,KAAA,CAAA,EAAA,iBAAA,EAQnB,KAAA,CATmB,KACA,CADA;AAAvB,WAAA;AAxB0B,SAAA,CAAA;;AAE1B,QAAA,KAAA,CAAA,KAAA,GAAA,aAAA,CAAA,EAAA,EACKA,qBAAqB,CACtBC,oBAAoB,CADE,OACF,CADE,EAEtB;AAFsB,QAAA,iBAAA,EAHA,KAGA,CAD1B,CAAA,CAF0B,CAW1B;AACA;AACA;;AACAN,QAAAA,OAAO,CAAPA,MAAAA,CAAAA,uBAAAA,CAAuC,KAAA,CAAvCA,YAAAA;AAd0B,eAAA,KAAA;AAe3B;;AAjBsB,MAAA,YAAA,CAAA,UAAA,EAAA,CAAA;AAAA,QAAA,GAAA,EAAA,sBAAA;AAAA,QAAA,KAAA,EAAA,SAAA,oBAAA,GAmBA;AACrB,eAAA,SAAA,GAAA,IAAA;AACA,eAAA,OAAA,CAAA,MAAA,CAAA,yBAAA,CAA8C,KAA9C,YAAA;AACD;AAtBsB,OAAA,EAAA;AAAA,QAAA,GAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,SAAA,MAAA,GAwCd;AACP;AADO,cAEIO,IAFJ,GAAA,QAAA,CAAA,EAAA,EAEa,KAFb,KAAA,CAAA;;AAIP,iBAAA,aAAO,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAe,KAAf,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;AA7CsB,OAAA,CAAA,CAAA;;AAAA,aAAA,UAAA;AAAA,KAAA,CACAH,KAAK,CADL,aAAA,CAAA;;AAgDzBD,IAAAA,UAAU,CAAVA,WAAAA,GAAAA,aAAAA;AACA,WAAA,UAAA;AAjDF,GAAA;AAmDD","sourcesContent":["import React from \"react\";\n\nimport SearchContext from \"./SearchContext\";\n\nfunction buildContextForProps(context) {\n  return {\n    ...context.driver.getState(),\n    ...context.driver.getActions()\n  };\n}\n\n/* For a given object execute mapContextToProps to pluck out the relevant\nproperties */\nfunction giveMeJustWhatINeeded(stateOrContext, mapContextToProps, props) {\n  const mapContextToPropsToUse = props.mapContextToProps || mapContextToProps;\n  return mapContextToPropsToUse(stateOrContext, props) || {};\n}\n\n/**\n * This is a Higher Order Component that wraps a component and injects state and actions from Search UI, effectively\n * \"connecting\" it to Search UI.\n *\n * Components using `withSearch` will be \"Pure\" components.\n * It is important to understand the implications of using a PureComponent, as described here:\n * https://reactjs.org/docs/optimizing-performance.html#examples\n *\n * @param Function mapContextToProps A function that accepts the context and allows you to pick the values to be passed as props\n * into the component. This allows you to \"select\" which values from the context to use.\n * @param Function Component\n */\nexport default function withSearch(mapContextToProps) {\n  if (!mapContextToProps) {\n    throw \"withSearch requires a function to be provided which returns an object with at least one value.\";\n  }\n\n  return function(Component) {\n    class WithSearch extends React.PureComponent {\n      constructor(props, context) {\n        super();\n        this.state = {\n          ...giveMeJustWhatINeeded(\n            buildContextForProps(context),\n            // eslint-disable-next-line react/prop-types\n            mapContextToProps,\n            props\n          )\n        };\n\n        // Note that we subscribe to changes at the component level, rather than\n        // at the top level Provider, so that we are re-rendering the entire\n        // subtree when state changes in the Provider.\n        context.driver.subscribeToStateChanges(this.subscription);\n      }\n\n      componentWillUnmount() {\n        this.unmounted = true;\n        this.context.driver.unsubscribeToStateChanges(this.subscription);\n      }\n\n      subscription = state => {\n        if (this.unmounted) return;\n        this.setState(prevState =>\n          giveMeJustWhatINeeded(\n            {\n              // We pass prevState here instead of just state so that actions are\n              // persisted as well, which are not passed in the subscription param\n              ...prevState,\n              ...state\n            },\n            mapContextToProps,\n            this.props\n          )\n        );\n      };\n\n      render() {\n        // eslint-disable-next-line react/prop-types\n        const { ...rest } = this.props;\n\n        return <Component {...this.state} {...rest} />;\n      }\n    }\n\n    WithSearch.contextType = SearchContext;\n    return WithSearch;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}