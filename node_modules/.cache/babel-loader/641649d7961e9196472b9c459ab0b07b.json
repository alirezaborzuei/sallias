{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { doFilterValuesMatch } from \"../helpers\";\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function addFilter(name, value) {\n  var _console;\n\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\"; // eslint-disable-next-line no-console\n\n  if (this.debug) (_console = console).log.apply(_console, [\"Search UI: Action\", \"addFilter\"].concat(Array.prototype.slice.call(arguments)));\n  var filters = this.state.filters;\n  var existingFilter = filters.find(function (f) {\n    return f.field === name && f.type === type;\n  }) || {};\n  var allOtherFilters = filters.filter(function (f) {\n    return f.field !== name || f.type !== type;\n  }) || [];\n  var existingFilterValues = existingFilter.values || [];\n  var newFilterValues = existingFilterValues.find(function (existing) {\n    return doFilterValuesMatch(existing, value);\n  }) ? existingFilterValues : existingFilterValues.concat(value);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [].concat(_toConsumableArray(allOtherFilters), [{\n      field: name,\n      values: newFilterValues,\n      type: type\n    }])\n  });\n}","map":{"version":3,"sources":["../../src/actions/addFilter.js"],"names":["type","filters","existingFilter","f","allOtherFilters","existingFilterValues","newFilterValues","doFilterValuesMatch","current","field","values"],"mappings":";AAAA,SAAA,mBAAA,QAAA,YAAA;AAEA;;;;;;;;;;AASA,eAAe,SAAA,SAAA,CAAA,IAAA,EAAA,KAAA,EAA8C;AAAA,MAAA,QAAA;;AAAA,MAAdA,IAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,KAAO,CAAA,CAC3D;;AACA,MAAI,KAAJ,KAAA,EAAgB,CAAA,QAAA,GAAA,OAAA,EAAA,GAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,mBAAA,EAAA,WAAA,EAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;AAF2C,MAInDC,OAJmD,GAIvC,KAJuC,KAIvC,CAJuC,OAAA;AAM3D,MAAMC,cAAc,GAClB,OAAO,CAAP,IAAA,CAAa,UAAA,CAAA,EAAC;AAAA,WAAIC,CAAC,CAADA,KAAAA,KAAAA,IAAAA,IAAoBA,CAAC,CAADA,IAAAA,KAAxB,IAAA;AAAd,GAAA,KADF,EAAA;AAEA,MAAMC,eAAe,GACnB,OAAO,CAAP,MAAA,CAAe,UAAA,CAAA,EAAC;AAAA,WAAID,CAAC,CAADA,KAAAA,KAAAA,IAAAA,IAAoBA,CAAC,CAADA,IAAAA,KAAxB,IAAA;AAAhB,GAAA,KADF,EAAA;AAEA,MAAME,oBAAoB,GAAGH,cAAc,CAAdA,MAAAA,IAA7B,EAAA;AAEA,MAAMI,eAAe,GAAG,oBAAoB,CAApB,IAAA,CAA0B,UAAA,QAAA,EAAQ;AAAA,WACxDC,mBAAmB,CAAA,QAAA,EADqC,KACrC,CADqC;AAAlC,GAAA,IAAA,oBAAA,GAIpBF,oBAAoB,CAApBA,MAAAA,CAJJ,KAIIA,CAJJ;;AAMA,OAAA,oBAAA,CAA0B;AACxBG,IAAAA,OAAO,EADiB,CAAA;AAExBP,IAAAA,OAAO,EAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,eAAA,CAAA,EAAA,CAEL;AAAEQ,MAAAA,KAAK,EAAP,IAAA;AAAeC,MAAAA,MAAM,EAArB,eAAA;AAAwCV,MAAAA,IAAI,EAAJA;AAAxC,KAFK,CAAA;AAFiB,GAA1B;AAOD","sourcesContent":["import { doFilterValuesMatch } from \"../helpers\";\n\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\nexport default function addFilter(name, value, type = \"all\") {\n  // eslint-disable-next-line no-console\n  if (this.debug) console.log(\"Search UI: Action\", \"addFilter\", ...arguments);\n\n  const { filters } = this.state;\n\n  const existingFilter =\n    filters.find(f => f.field === name && f.type === type) || {};\n  const allOtherFilters =\n    filters.filter(f => f.field !== name || f.type !== type) || [];\n  const existingFilterValues = existingFilter.values || [];\n\n  const newFilterValues = existingFilterValues.find(existing =>\n    doFilterValuesMatch(existing, value)\n  )\n    ? existingFilterValues\n    : existingFilterValues.concat(value);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [\n      ...allOtherFilters,\n      { field: name, values: newFilterValues, type }\n    ]\n  });\n}\n"]},"metadata":{},"sourceType":"module"}