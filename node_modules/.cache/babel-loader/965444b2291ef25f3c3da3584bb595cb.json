{"ast":null,"code":"function isTypeNumber(value) {\n  return value !== undefined && value !== null && typeof value === \"number\";\n}\n\nfunction isTypeBoolean(value) {\n  return value && typeof value === \"boolean\";\n}\n\nfunction toBoolean(value) {\n  if (value === \"true\") return true;\n  if (value === \"false\") return false;\n  throw \"Invalid type parsed as Boolean value\";\n}\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\n\n\nexport default {\n  encode: function encode(value, _encode) {\n    if (isTypeNumber(value)) {\n      return \"n_\".concat(value, \"_n\");\n    }\n\n    if (isTypeBoolean(value)) {\n      return \"b_\".concat(value, \"_b\");\n    }\n\n    return _encode(value);\n  },\n  decode: function decode(value, _decode) {\n    //eslint-disable-next-line\n    if (/n_-?[\\d\\.]*_n/.test(value)) {\n      var numericValueString = value.substring(2, value.length - 2);\n      return Number(numericValueString);\n    }\n\n    if (/^b_(true|false)*_b$/.test(value)) {\n      var booleanValueString = value.substring(2, value.length - 2);\n      return toBoolean(booleanValueString);\n    }\n\n    return _decode(value);\n  }\n};","map":{"version":3,"sources":["../src/preserveTypesEncoder.js"],"names":["value","encode","isTypeNumber","isTypeBoolean","decode","numericValueString","Number","booleanValueString","toBoolean"],"mappings":"AAAA,SAAA,YAAA,CAAA,KAAA,EAA6B;AAC3B,SAAOA,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAA5BA,IAAAA,IAAyC,OAAA,KAAA,KAAhD,QAAA;AACD;;AAED,SAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,SAAOA,KAAK,IAAI,OAAA,KAAA,KAAhB,SAAA;AACD;;AAED,SAAA,SAAA,CAAA,KAAA,EAA0B;AACxB,MAAIA,KAAK,KAAT,MAAA,EAAsB,OAAA,IAAA;AACtB,MAAIA,KAAK,KAAT,OAAA,EAAuB,OAAA,KAAA;AACvB,QAAA,sCAAA;AACD;AAED;;;;AAGA,eAAe;AACbC,EAAAA,MADa,EAAA,SAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EACS;AACpB,QAAIC,YAAY,CAAhB,KAAgB,CAAhB,EAAyB;AACvB,aAAA,KAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA;AACD;;AACD,QAAIC,aAAa,CAAjB,KAAiB,CAAjB,EAA0B;AACxB,aAAA,KAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA;AACD;;AACD,WAAOF,OAAM,CAAb,KAAa,CAAb;AARW,GAAA;AAUbG,EAAAA,MAVa,EAAA,SAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAUS;AACpB;AACA,QAAI,gBAAA,IAAA,CAAJ,KAAI,CAAJ,EAAiC;AAC/B,UAAMC,kBAAkB,GAAGL,KAAK,CAALA,SAAAA,CAAAA,CAAAA,EAAmBA,KAAK,CAALA,MAAAA,GAA9C,CAA2BA,CAA3B;AACA,aAAOM,MAAM,CAAb,kBAAa,CAAb;AACD;;AACD,QAAI,sBAAA,IAAA,CAAJ,KAAI,CAAJ,EAAuC;AACrC,UAAMC,kBAAkB,GAAGP,KAAK,CAALA,SAAAA,CAAAA,CAAAA,EAAmBA,KAAK,CAALA,MAAAA,GAA9C,CAA2BA,CAA3B;AACA,aAAOQ,SAAS,CAAhB,kBAAgB,CAAhB;AACD;;AACD,WAAOJ,OAAM,CAAb,KAAa,CAAb;AACD;AArBY,CAAf","sourcesContent":["function isTypeNumber(value) {\n  return value !== undefined && value !== null && typeof value === \"number\";\n}\n\nfunction isTypeBoolean(value) {\n  return value && typeof value === \"boolean\";\n}\n\nfunction toBoolean(value) {\n  if (value === \"true\") return true;\n  if (value === \"false\") return false;\n  throw \"Invalid type parsed as Boolean value\";\n}\n\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\n\nexport default {\n  encode(value, encode) {\n    if (isTypeNumber(value)) {\n      return `n_${value}_n`;\n    }\n    if (isTypeBoolean(value)) {\n      return `b_${value}_b`;\n    }\n    return encode(value);\n  },\n  decode(value, decode) {\n    //eslint-disable-next-line\n    if (/n_-?[\\d\\.]*_n/.test(value)) {\n      const numericValueString = value.substring(2, value.length - 2);\n      return Number(numericValueString);\n    }\n    if (/^b_(true|false)*_b$/.test(value)) {\n      const booleanValueString = value.substring(2, value.length - 2);\n      return toBoolean(booleanValueString);\n    }\n    return decode(value);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}