{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Set the current search term\n *\n * Will trigger new search\n *\n * @param searchTerm String\n * @param options Object Additional objects\n * @param autocompleteMinimumCharacters Number Only trigger autocomplete if\n * searchTerm has at least this number of characters\n * @param options.autocompleteResults Boolean Fetch autocomplete\n * results?\n * @param options.refresh Boolean Refresh search results?\n * @param options.debounce Length to debounce API calls\n */\n\n\nexport default function setSearchTerm(searchTerm) {\n  var _console;\n\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$autocompleteMini = _ref.autocompleteMinimumCharacters,\n      autocompleteMinimumCharacters = _ref$autocompleteMini === void 0 ? 0 : _ref$autocompleteMini,\n      _ref$autocompleteResu = _ref.autocompleteResults,\n      autocompleteResults = _ref$autocompleteResu === void 0 ? false : _ref$autocompleteResu,\n      _ref$autocompleteSugg = _ref.autocompleteSuggestions,\n      autocompleteSuggestions = _ref$autocompleteSugg === void 0 ? false : _ref$autocompleteSugg,\n      _ref$shouldClearFilte = _ref.shouldClearFilters,\n      shouldClearFilters = _ref$shouldClearFilte === void 0 ? true : _ref$shouldClearFilte,\n      _ref$refresh = _ref.refresh,\n      refresh = _ref$refresh === void 0 ? true : _ref$refresh,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === void 0 ? 0 : _ref$debounce;\n\n  if (this.debug) // eslint-disable-next-line no-console\n    (_console = console).log.apply(_console, [\"Search UI: Action\", \"setSearchTerm\"].concat(Array.prototype.slice.call(arguments)));\n\n  this._setState({\n    searchTerm: searchTerm\n  });\n\n  if (refresh) {\n    this.debounceManager.runWithDebounce(debounce, \"_updateSearchResults\", this._updateSearchResults, _objectSpread({\n      current: 1\n    }, shouldClearFilters && {\n      filters: []\n    }));\n  }\n\n  if ((autocompleteResults || autocompleteSuggestions) && searchTerm.length >= autocompleteMinimumCharacters) {\n    this.debounceManager.runWithDebounce(debounce, \"_updateAutocomplete\", this._updateAutocomplete, searchTerm, {\n      autocompleteResults: autocompleteResults,\n      autocompleteSuggestions: autocompleteSuggestions\n    });\n  }\n}","map":{"version":3,"sources":["../../src/actions/setSearchTerm.js"],"names":["autocompleteMinimumCharacters","autocompleteResults","autocompleteSuggestions","shouldClearFilters","refresh","debounce","searchTerm","current","filters"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAcA,eAAe,SAAA,aAAA,CAAA,UAAA,EAUb;AAAA,MAAA,QAAA;;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADI,EACJ;AAAA,MAAA,qBAAA,GAAA,IAAA,CAPEA,6BAOF;AAAA,MAPEA,6BAOF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAPkC,CAOlC,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAAA,IAAA,CANEC,mBAMF;AAAA,MANEA,mBAMF,GAAA,qBAAA,KAAA,KAAA,CAAA,GANwB,KAMxB,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAAA,IAAA,CALEC,uBAKF;AAAA,MALEA,uBAKF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAL4B,KAK5B,GAAA,qBAAA;AAAA,MAAA,qBAAA,GAAA,IAAA,CAJEC,kBAIF;AAAA,MAJEA,kBAIF,GAAA,qBAAA,KAAA,KAAA,CAAA,GAJuB,IAIvB,GAAA,qBAAA;AAAA,MAAA,YAAA,GAAA,IAAA,CAHEC,OAGF;AAAA,MAHEA,OAGF,GAAA,YAAA,KAAA,KAAA,CAAA,GAHY,IAGZ,GAAA,YAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CAFEC,QAEF;AAAA,MAFEA,QAEF,GAAA,aAAA,KAAA,KAAA,CAAA,GAFa,CAEb,GAAA,aAAA;;AACA,MAAI,KAAJ,KAAA,EACE;AACA,KAAA,QAAA,GAAA,OAAA,EAAA,GAAA,CAAA,KAAA,CAAA,QAAA,EAAA,CAAA,mBAAA,EAAA,eAAA,EAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;;AAEF,OAAA,SAAA,CAAe;AAAEC,IAAAA,UAAU,EAAVA;AAAF,GAAf;;AAEA,MAAA,OAAA,EAAa;AACX,SAAA,eAAA,CAAA,eAAA,CAAA,QAAA,EAAA,sBAAA,EAGE,KAHF,oBAAA,EAAA,aAAA,CAAA;AAKIC,MAAAA,OAAO,EAAE;AALb,KAAA,EAMQJ,kBAAkB,IAAI;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAN9B,CAAA;AASD;;AAED,MACE,CAACP,mBAAmB,IAApB,uBAAA,KACAK,UAAU,CAAVA,MAAAA,IAFF,6BAAA,EAGE;AACA,SAAA,eAAA,CAAA,eAAA,CAAA,QAAA,EAAA,qBAAA,EAGE,KAHF,mBAAA,EAAA,UAAA,EAKE;AACEL,MAAAA,mBAAmB,EADrB,mBAAA;AAEEC,MAAAA,uBAAuB,EAAvBA;AAFF,KALF;AAUD;AACF","sourcesContent":["/**\n * Set the current search term\n *\n * Will trigger new search\n *\n * @param searchTerm String\n * @param options Object Additional objects\n * @param autocompleteMinimumCharacters Number Only trigger autocomplete if\n * searchTerm has at least this number of characters\n * @param options.autocompleteResults Boolean Fetch autocomplete\n * results?\n * @param options.refresh Boolean Refresh search results?\n * @param options.debounce Length to debounce API calls\n */\nexport default function setSearchTerm(\n  searchTerm,\n  {\n    autocompleteMinimumCharacters = 0,\n    autocompleteResults = false,\n    autocompleteSuggestions = false,\n    shouldClearFilters = true,\n    refresh = true,\n    debounce = 0\n  } = {}\n) {\n  if (this.debug)\n    // eslint-disable-next-line no-console\n    console.log(\"Search UI: Action\", \"setSearchTerm\", ...arguments);\n\n  this._setState({ searchTerm });\n\n  if (refresh) {\n    this.debounceManager.runWithDebounce(\n      debounce,\n      \"_updateSearchResults\",\n      this._updateSearchResults,\n      {\n        current: 1,\n        ...(shouldClearFilters && { filters: [] })\n      }\n    );\n  }\n\n  if (\n    (autocompleteResults || autocompleteSuggestions) &&\n    searchTerm.length >= autocompleteMinimumCharacters\n  ) {\n    this.debounceManager.runWithDebounce(\n      debounce,\n      \"_updateAutocomplete\",\n      this._updateAutocomplete,\n      searchTerm,\n      {\n        autocompleteResults,\n        autocompleteSuggestions\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}