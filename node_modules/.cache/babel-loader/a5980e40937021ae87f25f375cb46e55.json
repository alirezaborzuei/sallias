{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\n  This deals with sequencing of our async requests. When a lot of requests are firing very close to one another\n  and are running in parallel, what happens if they return out of order? It creates a race condition.\n\n  For example, if I type the term \"react\" in the search box, two queries may be initiated, in parallel.\n\n  1. query for \"reac\"\n  2. query for \"react\"\n\n  If the query for \"react\" actually returns **before** the query for \"reac\",\n  we could end up looking at the results for \"reac\", despite having typed \"react\" in the search box.\n\n  To deal with this, we keep track of a sequence.\n  */\n\nvar RequestSequencer = /*#__PURE__*/function () {\n  function RequestSequencer() {\n    _classCallCheck(this, RequestSequencer);\n\n    _defineProperty(this, \"requestSequence\", 0);\n\n    _defineProperty(this, \"lastCompleted\", 0);\n  }\n\n  _createClass(RequestSequencer, [{\n    key: \"next\",\n    value: function next() {\n      return ++this.requestSequence;\n    }\n  }, {\n    key: \"isOldRequest\",\n    value: function isOldRequest(request) {\n      return request < this.lastCompleted;\n    }\n  }, {\n    key: \"completed\",\n    value: function completed(request) {\n      this.lastCompleted = request;\n    }\n  }]);\n\n  return RequestSequencer;\n}();\n\nexport { RequestSequencer as default };","map":{"version":3,"sources":["../src/RequestSequencer.js"],"names":["RequestSequencer","request"],"mappings":";;;AAAA;;;;;;;;;;;;;;;IAcqBA,gB;;;;6CACD,C;;2CACF,C;;;;;2BAET;AACL,aAAO,EAAE,KAAT,eAAA;AACD;;;iCAEYC,O,EAAS;AACpB,aAAOA,OAAO,GAAG,KAAjB,aAAA;AACD;;;8BAESA,O,EAAS;AACjB,WAAA,aAAA,GAAA,OAAA;AACD;;;;;;SAdkBD,gB","sourcesContent":["/*\n  This deals with sequencing of our async requests. When a lot of requests are firing very close to one another\n  and are running in parallel, what happens if they return out of order? It creates a race condition.\n\n  For example, if I type the term \"react\" in the search box, two queries may be initiated, in parallel.\n\n  1. query for \"reac\"\n  2. query for \"react\"\n\n  If the query for \"react\" actually returns **before** the query for \"reac\",\n  we could end up looking at the results for \"reac\", despite having typed \"react\" in the search box.\n\n  To deal with this, we keep track of a sequence.\n  */\nexport default class RequestSequencer {\n  requestSequence = 0;\n  lastCompleted = 0;\n\n  next() {\n    return ++this.requestSequence;\n  }\n\n  isOldRequest(request) {\n    return request < this.lastCompleted;\n  }\n\n  completed(request) {\n    this.lastCompleted = request;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}