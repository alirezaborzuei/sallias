{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n  var className = props.className,\n      allAutocompletedItemsCount = props.allAutocompletedItemsCount,\n      autocompleteView = props.autocompleteView,\n      isFocused = props.isFocused,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,\n      inputView = props.inputView,\n      onChange = props.onChange,\n      onSelectAutocomplete = props.onSelectAutocomplete,\n      _onSubmit = props.onSubmit,\n      useAutocomplete = props.useAutocomplete,\n      value = props.value,\n      autocompletedResults = props.autocompletedResults,\n      autocompletedSuggestions = props.autocompletedSuggestions,\n      autocompletedSuggestionsCount = props.autocompletedSuggestionsCount,\n      completeSuggestion = props.completeSuggestion,\n      notifyAutocompleteSelected = props.notifyAutocompleteSelected,\n      rest = _objectWithoutProperties(props, [\"className\", \"allAutocompletedItemsCount\", \"autocompleteView\", \"isFocused\", \"inputProps\", \"inputView\", \"onChange\", \"onSelectAutocomplete\", \"onSubmit\", \"useAutocomplete\", \"value\", \"autocompletedResults\", \"autocompletedSuggestions\", \"autocompletedSuggestionsCount\", \"completeSuggestion\", \"notifyAutocompleteSelected\"]);\n\n  var focusedClass = isFocused ? \"focus\" : \"\";\n  var AutocompleteView = autocompleteView || Autocomplete;\n  var InputView = inputView || SearchInput;\n  return /*#__PURE__*/React.createElement(Downshift, _extends({\n    inputValue: value,\n    onChange: onSelectAutocomplete,\n    onInputValueChange: function onInputValueChange(newValue) {\n      // To avoid over dispatching\n      if (value === newValue) return;\n      onChange(newValue);\n    } // Because when a selection is made, we don't really want to change\n    // the inputValue. This is supposed to be a \"controlled\" value, and when\n    // this happens we lose control of it.\n    ,\n    itemToString: function itemToString() {\n      return value;\n    }\n  }, rest), function (downshiftProps) {\n    var closeMenu = downshiftProps.closeMenu,\n        _getInputProps = downshiftProps.getInputProps,\n        isOpen = downshiftProps.isOpen;\n    var autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: function onSubmit(e) {\n        closeMenu();\n\n        _onSubmit(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: appendClassName(\"sui-search-box\", className) + autocompleteClass\n    }, /*#__PURE__*/React.createElement(InputView, _extends({}, downshiftProps, {\n      getInputProps: function getInputProps(additionalProps) {\n        var _ref = additionalProps || {},\n            className = _ref.className,\n            rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n        return _getInputProps(_objectSpread(_objectSpread({\n          placeholder: \"Search\"\n        }, inputProps), {}, {\n          className: appendClassName(\"sui-search-box__text-input\", [inputProps.className, className, focusedClass])\n        }, rest));\n      },\n      getButtonProps: function getButtonProps(additionalProps) {\n        var _ref2 = additionalProps || {},\n            className = _ref2.className,\n            rest = _objectWithoutProperties(_ref2, [\"className\"]);\n\n        return _objectSpread({\n          type: \"submit\",\n          value: \"Search\",\n          className: appendClassName(\"button sui-search-box__submit\", className)\n        }, rest);\n      },\n      getAutocomplete: function getAutocomplete() {\n        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {\n          return /*#__PURE__*/React.createElement(AutocompleteView, _extends({}, props, downshiftProps));\n        } else {\n          return null;\n        }\n      }\n    }))));\n  });\n}\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    titleField: PropTypes.string.isRequired,\n    urlField: PropTypes.string.isRequired,\n    linkTarget: PropTypes.string,\n    sectionTitle: PropTypes.string\n  })]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }), PropTypes.objectOf(PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }))]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\nexport default SearchBox;","map":{"version":3,"sources":["../src/SearchBox.js"],"names":["className","allAutocompletedItemsCount","autocompleteView","isFocused","inputProps","inputView","onChange","onSelectAutocomplete","onSubmit","useAutocomplete","value","autocompletedResults","autocompletedSuggestions","autocompletedSuggestionsCount","completeSuggestion","notifyAutocompleteSelected","rest","props","focusedClass","AutocompleteView","InputView","closeMenu","getInputProps","isOpen","downshiftProps","autocompleteClass","appendClassName","additionalProps","placeholder","type","SearchBox","PropTypes","autocompleteResults","titleField","urlField","linkTarget","sectionTitle","string","autocompleteSuggestions","func"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\n\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\n\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n  const {\n    className,\n    allAutocompletedItemsCount,\n    autocompleteView,\n    isFocused,\n    inputProps = {},\n    inputView,\n    onChange,\n    onSelectAutocomplete,\n    onSubmit,\n    useAutocomplete,\n    value,\n    // NOTE: These are explicitly de-structured but not used so that they are\n    // not passed through to the input with the 'rest' parameter\n    // eslint-disable-next-line no-unused-vars\n    autocompletedResults,\n    // eslint-disable-next-line no-unused-vars\n    autocompletedSuggestions,\n    // eslint-disable-next-line no-unused-vars\n    autocompletedSuggestionsCount,\n    // eslint-disable-next-line no-unused-vars\n    completeSuggestion,\n    // eslint-disable-next-line no-unused-vars\n    notifyAutocompleteSelected,\n    ...rest\n  } = props;\n  const focusedClass = isFocused ? \"focus\" : \"\";\n  const AutocompleteView = autocompleteView || Autocomplete;\n  const InputView = inputView || SearchInput;\n\n  return (\n    <Downshift\n      inputValue={value}\n      onChange={onSelectAutocomplete}\n      onInputValueChange={newValue => {\n        // To avoid over dispatching\n        if (value === newValue) return;\n        onChange(newValue);\n      }}\n      // Because when a selection is made, we don't really want to change\n      // the inputValue. This is supposed to be a \"controlled\" value, and when\n      // this happens we lose control of it.\n      itemToString={() => value}\n      {...rest}\n    >\n      {downshiftProps => {\n        const { closeMenu, getInputProps, isOpen } = downshiftProps;\n        let autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n        return (\n          <form\n            onSubmit={e => {\n              closeMenu();\n              onSubmit(e);\n            }}\n          >\n            <div\n              className={\n                appendClassName(\"sui-search-box\", className) + autocompleteClass\n              }\n            >\n              <InputView\n                {...downshiftProps}\n                getInputProps={additionalProps => {\n                  const { className, ...rest } = additionalProps || {};\n                  return getInputProps({\n                    placeholder: \"Search\",\n                    ...inputProps,\n                    className: appendClassName(\"sui-search-box__text-input\", [\n                      inputProps.className,\n                      className,\n                      focusedClass\n                    ]),\n                    ...rest\n                  });\n                }}\n                getButtonProps={additionalProps => {\n                  const { className, ...rest } = additionalProps || {};\n                  return {\n                    type: \"submit\",\n                    value: \"Search\",\n                    className: appendClassName(\n                      \"button sui-search-box__submit\",\n                      className\n                    ),\n                    ...rest\n                  };\n                }}\n                getAutocomplete={() => {\n                  if (\n                    useAutocomplete &&\n                    isOpen &&\n                    allAutocompletedItemsCount > 0\n                  ) {\n                    return <AutocompleteView {...props} {...downshiftProps} />;\n                  } else {\n                    return null;\n                  }\n                }}\n              />\n            </div>\n          </form>\n        );\n      }}\n    </Downshift>\n  );\n}\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion))\n    .isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      titleField: PropTypes.string.isRequired,\n      urlField: PropTypes.string.isRequired,\n      linkTarget: PropTypes.string,\n      sectionTitle: PropTypes.string\n    })\n  ]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.exact({\n      sectionTitle: PropTypes.string\n    }),\n    PropTypes.objectOf(\n      PropTypes.exact({\n        sectionTitle: PropTypes.string\n      })\n    )\n  ]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\n\nexport default SearchBox;\n"]},"metadata":{},"sourceType":"module"}