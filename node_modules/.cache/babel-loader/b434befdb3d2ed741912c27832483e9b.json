{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport URLManager from \"./URLManager\";\nimport RequestSequencer from \"./RequestSequencer\";\nimport DebounceManager from \"./DebounceManager\";\nimport * as actions from \"./actions\";\nimport Events from \"./Events\";\nimport { mergeFilters } from \"./helpers\";\nimport * as a11y from \"./A11yNotifications\";\n\nfunction filterSearchParameters(_ref) {\n  var current = _ref.current,\n      filters = _ref.filters,\n      resultsPerPage = _ref.resultsPerPage,\n      searchTerm = _ref.searchTerm,\n      sortDirection = _ref.sortDirection,\n      sortField = _ref.sortField;\n  return {\n    current: current,\n    filters: filters,\n    resultsPerPage: resultsPerPage,\n    searchTerm: searchTerm,\n    sortDirection: sortDirection,\n    sortField: sortField\n  };\n}\n\nexport var DEFAULT_STATE = {\n  // Search Parameters -- This is state that represents the input state.\n  current: 1,\n  filters: [],\n  resultsPerPage: 20,\n  searchTerm: \"\",\n  sortDirection: \"\",\n  sortField: \"\",\n  // Result State -- This state represents state that is updated automatically\n  // as the result of changing input state.\n  autocompletedResults: [],\n  autocompletedResultsRequestId: \"\",\n  autocompletedSuggestions: {},\n  autocompletedSuggestionsRequestId: \"\",\n  error: \"\",\n  isLoading: false,\n  facets: {},\n  requestId: \"\",\n  results: [],\n  resultSearchTerm: \"\",\n  totalPages: 0,\n  totalResults: 0,\n  pagingStart: 0,\n  pagingEnd: 0,\n  wasSearched: false\n};\n\nfunction removeConditionalFacets() {\n  var facets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var conditionalFacets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var filters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return Object.entries(facets).reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        facetKey = _ref3[0],\n        facet = _ref3[1];\n\n    if (conditionalFacets[facetKey] && typeof conditionalFacets[facetKey] === \"function\" && !conditionalFacets[facetKey]({\n      filters: filters\n    })) {\n      return acc;\n    }\n\n    acc[facetKey] = facet;\n    return acc;\n  }, {});\n}\n/*\n * The Driver is a framework agnostic search state manager that is capable\n * syncing state to the url.\n */\n\n\nvar SearchDriver = /*#__PURE__*/function () {\n  function SearchDriver(_ref4) {\n    var _this = this;\n\n    var apiConnector = _ref4.apiConnector,\n        _ref4$autocompleteQue = _ref4.autocompleteQuery,\n        autocompleteQuery = _ref4$autocompleteQue === void 0 ? {} : _ref4$autocompleteQue,\n        debug = _ref4.debug,\n        initialState = _ref4.initialState,\n        onSearch = _ref4.onSearch,\n        onAutocomplete = _ref4.onAutocomplete,\n        onResultClick = _ref4.onResultClick,\n        onAutocompleteResultClick = _ref4.onAutocompleteResultClick,\n        _ref4$searchQuery = _ref4.searchQuery,\n        searchQuery = _ref4$searchQuery === void 0 ? {} : _ref4$searchQuery,\n        _ref4$trackUrlState = _ref4.trackUrlState,\n        trackUrlState = _ref4$trackUrlState === void 0 ? true : _ref4$trackUrlState,\n        _ref4$urlPushDebounce = _ref4.urlPushDebounceLength,\n        urlPushDebounceLength = _ref4$urlPushDebounce === void 0 ? 500 : _ref4$urlPushDebounce,\n        _ref4$hasA11yNotifica = _ref4.hasA11yNotifications,\n        hasA11yNotifications = _ref4$hasA11yNotifica === void 0 ? false : _ref4$hasA11yNotifica,\n        _ref4$a11yNotificatio = _ref4.a11yNotificationMessages,\n        a11yNotificationMessages = _ref4$a11yNotificatio === void 0 ? {} : _ref4$a11yNotificatio,\n        _ref4$alwaysSearchOnI = _ref4.alwaysSearchOnInitialLoad,\n        alwaysSearchOnInitialLoad = _ref4$alwaysSearchOnI === void 0 ? false : _ref4$alwaysSearchOnI;\n\n    _classCallCheck(this, SearchDriver);\n\n    _defineProperty(this, \"state\", DEFAULT_STATE);\n\n    _defineProperty(this, \"_updateAutocomplete\", function (searchTerm) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          autocompleteResults = _ref5.autocompleteResults,\n          autocompleteSuggestions = _ref5.autocompleteSuggestions;\n\n      var requestId = _this.autocompleteRequestSequencer.next();\n\n      var queryConfig = _objectSpread(_objectSpread({}, autocompleteResults && {\n        results: _this.autocompleteQuery.results || {}\n      }), autocompleteSuggestions && {\n        suggestions: _this.autocompleteQuery.suggestions || {}\n      });\n\n      return _this.events.autocomplete({\n        searchTerm: searchTerm\n      }, queryConfig).then(function (autocompleted) {\n        if (_this.autocompleteRequestSequencer.isOldRequest(requestId)) return;\n\n        _this.autocompleteRequestSequencer.completed(requestId);\n\n        _this._setState(autocompleted);\n      });\n    });\n\n    _defineProperty(this, \"_updateSearchResults\", function (searchParameters) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref6$skipPushToUrl = _ref6.skipPushToUrl,\n          skipPushToUrl = _ref6$skipPushToUrl === void 0 ? false : _ref6$skipPushToUrl,\n          _ref6$replaceUrl = _ref6.replaceUrl,\n          replaceUrl = _ref6$replaceUrl === void 0 ? false : _ref6$replaceUrl;\n\n      var _this$state$searchPar = _objectSpread(_objectSpread({}, _this.state), searchParameters),\n          current = _this$state$searchPar.current,\n          filters = _this$state$searchPar.filters,\n          resultsPerPage = _this$state$searchPar.resultsPerPage,\n          searchTerm = _this$state$searchPar.searchTerm,\n          sortDirection = _this$state$searchPar.sortDirection,\n          sortField = _this$state$searchPar.sortField; // State updates should always be applied in the order that they are made. This function, _updateSearchResults,\n      // makes state updates.\n      // In the case where a call to \"_updateSearchResults\" was made and delayed for X amount of time using\n      // `debounceManager.runWithDebounce`, and a subsequent call is made _updateSearchResults before that delay ends, we\n      // want to make sure that outstanding call to \"_updateSearchResults\" is cancelled, as it would apply state updates\n      // out of order.\n\n\n      _this.debounceManager.cancelByName(\"_updateSearchResults\");\n\n      _this._setState({\n        current: current,\n        error: \"\",\n        filters: filters,\n        resultsPerPage: resultsPerPage,\n        searchTerm: searchTerm,\n        sortDirection: sortDirection,\n        sortField: sortField\n      });\n\n      _this._makeSearchRequest({\n        skipPushToUrl: skipPushToUrl,\n        replaceUrl: replaceUrl\n      });\n    });\n\n    _defineProperty(this, \"_makeSearchRequest\", DebounceManager.debounce(0, function (_ref7) {\n      var skipPushToUrl = _ref7.skipPushToUrl,\n          replaceUrl = _ref7.replaceUrl;\n      var _this$state = _this.state,\n          current = _this$state.current,\n          filters = _this$state.filters,\n          resultsPerPage = _this$state.resultsPerPage,\n          searchTerm = _this$state.searchTerm,\n          sortDirection = _this$state.sortDirection,\n          sortField = _this$state.sortField;\n\n      _this._setState({\n        isLoading: true\n      });\n\n      var requestId = _this.searchRequestSequencer.next();\n\n      var _this$searchQuery = _this.searchQuery,\n          searchQueryFilters = _this$searchQuery.filters,\n          conditionalFacets = _this$searchQuery.conditionalFacets,\n          restOfSearchQuery = _objectWithoutProperties(_this$searchQuery, [\"filters\", \"conditionalFacets\"]);\n\n      var queryConfig = _objectSpread(_objectSpread({}, restOfSearchQuery), {}, {\n        facets: removeConditionalFacets(_this.searchQuery.facets, conditionalFacets, filters)\n      });\n\n      var requestState = _objectSpread(_objectSpread({}, filterSearchParameters(_this.state)), {}, {\n        filters: mergeFilters(filters, _this.searchQuery.filters)\n      });\n\n      return _this.events.search(requestState, queryConfig).then(function (resultState) {\n        if (_this.searchRequestSequencer.isOldRequest(requestId)) return;\n\n        _this.searchRequestSequencer.completed(requestId); // Results paging start & end\n\n\n        var totalResults = resultState.totalResults;\n        var start = totalResults === 0 ? 0 : (current - 1) * resultsPerPage + 1;\n        var end = totalResults <= start + resultsPerPage ? totalResults : start + resultsPerPage - 1;\n\n        _this._setState(_objectSpread(_objectSpread({\n          isLoading: false,\n          resultSearchTerm: searchTerm,\n          pagingStart: start,\n          pagingEnd: end\n        }, resultState), {}, {\n          wasSearched: true\n        }));\n\n        if (_this.hasA11yNotifications) {\n          var messageArgs = {\n            start: start,\n            end: end,\n            totalResults: totalResults,\n            searchTerm: searchTerm\n          };\n\n          _this.actions.a11yNotify(\"searchResults\", messageArgs);\n        }\n\n        if (!skipPushToUrl && _this.trackUrlState) {\n          // We debounce here so that we don't get a lot of intermediary\n          // URL state if someone is updating a UI really fast, like typing\n          // in a live search box for instance.\n          _this.debounceManager.runWithDebounce(_this.urlPushDebounceLength, \"pushStateToURL\", _this.URLManager.pushStateToURL.bind(_this.URLManager), {\n            current: current,\n            filters: filters,\n            resultsPerPage: resultsPerPage,\n            searchTerm: searchTerm,\n            sortDirection: sortDirection,\n            sortField: sortField\n          }, {\n            replaceUrl: replaceUrl\n          });\n        }\n      }, function (error) {\n        _this._setState({\n          error: \"An unexpected error occurred: \".concat(error.message)\n        });\n      });\n    }));\n\n    this.actions = Object.entries(actions).reduce(function (acc, _ref8) {\n      var _ref9 = _slicedToArray(_ref8, 2),\n          actionName = _ref9[0],\n          action = _ref9[1];\n\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, actionName, action.bind(_this)));\n    }, {});\n    Object.assign(this, this.actions);\n    this.events = new Events({\n      apiConnector: apiConnector,\n      onSearch: onSearch,\n      onAutocomplete: onAutocomplete,\n      onResultClick: onResultClick,\n      onAutocompleteResultClick: onAutocompleteResultClick\n    });\n    this.debug = debug;\n\n    if (this.debug) {\n      console.warn(\"Search UI Debugging is enabled. This should be turned off in production deployments.\");\n      window.searchUI = this;\n    }\n\n    this.autocompleteRequestSequencer = new RequestSequencer();\n    this.searchRequestSequencer = new RequestSequencer();\n    this.debounceManager = new DebounceManager();\n    this.autocompleteQuery = autocompleteQuery;\n    this.searchQuery = searchQuery;\n    this.subscriptions = [];\n    this.trackUrlState = trackUrlState;\n    this.urlPushDebounceLength = urlPushDebounceLength;\n    this.alwaysSearchOnInitialLoad = alwaysSearchOnInitialLoad;\n    var urlState;\n\n    if (trackUrlState) {\n      this.URLManager = new URLManager();\n      urlState = this.URLManager.getStateFromURL();\n      this.URLManager.onURLStateChange(function (urlState) {\n        _this._updateSearchResults(_objectSpread(_objectSpread({}, DEFAULT_STATE), urlState), {\n          skipPushToUrl: true\n        });\n      });\n    } else {\n      urlState = {};\n    } // Manage screen reader accessible notifications\n\n\n    this.hasA11yNotifications = hasA11yNotifications;\n    if (this.hasA11yNotifications) a11y.getLiveRegion();\n    this.a11yNotificationMessages = _objectSpread(_objectSpread({}, a11y.defaultMessages), a11yNotificationMessages); // Remember the state this application is initialized into, so that we can\n    // reset to it later.\n\n    this.startingState = _objectSpread(_objectSpread({}, this.state), initialState); // We filter these here to disallow anything other than valid search\n    // parameters to be passed in initial state, or url state. `results`, etc,\n    // should not be allowed to be passed in, that should be generated based on\n    // the results of the query\n\n    var _searchParameters = filterSearchParameters(_objectSpread(_objectSpread({}, this.startingState), urlState)); // Initialize the state without calling _setState, because we don't\n    // want to trigger an update callback, we're just initializing the state\n    // to the correct default values for the initial UI render\n\n\n    this.state = _objectSpread(_objectSpread({}, this.state), _searchParameters); // We'll trigger an initial search if initial parameters contain\n    // a search term or filters, or if alwaysSearchOnInitialLoad is set.\n    // Otherwise, we'll just save their selections in state as initial values.\n\n    if (_searchParameters.searchTerm || _searchParameters.filters.length > 0 || this.alwaysSearchOnInitialLoad) {\n      this._updateSearchResults(_searchParameters, {\n        replaceUrl: true\n      });\n    }\n  }\n  /**\n   * This method is used to update state and trigger a new autocomplete search.\n   *\n   * @param {string} searchTerm\n   * @param {Object=} Object\n   * @param {boolean|Object} options.autocompleteResults - Should autocomplete results\n   * @param {boolean|Object} options.autocompleteSuggestions - Should autocomplete suggestions\n   */\n\n\n  _createClass(SearchDriver, [{\n    key: \"_setState\",\n    value: function _setState(newState) {\n      var state = _objectSpread(_objectSpread({}, this.state), newState); // eslint-disable-next-line no-console\n\n\n      if (this.debug) console.log(\"Search UI: State Update\", newState, state);\n      this.state = state;\n      this.subscriptions.forEach(function (subscription) {\n        return subscription(state);\n      });\n    }\n    /**\n     * Dynamically update the searchQuery configuration in this driver.\n     * This will issue a new query after being updated.\n     *\n     * @param Object searchQuery\n     */\n\n  }, {\n    key: \"setSearchQuery\",\n    value: function setSearchQuery(searchQuery) {\n      this.searchQuery = searchQuery;\n\n      this._updateSearchResults();\n    }\n    /**\n     * @param Object autocompleteQuery\n     */\n\n  }, {\n    key: \"setAutocompleteQuery\",\n    value: function setAutocompleteQuery(autocompleteQuery) {\n      this.autocompleteQuery = autocompleteQuery;\n    }\n    /**\n     * Any time state is updated in this Driver, the provided callback\n     * will be executed with the updated state.\n     *\n     * @param onStateChange Function\n     */\n\n  }, {\n    key: \"subscribeToStateChanges\",\n    value: function subscribeToStateChanges(onStateChange) {\n      this.subscriptions.push(onStateChange);\n    }\n    /**\n     * @param onStateChange Function\n     */\n\n  }, {\n    key: \"unsubscribeToStateChanges\",\n    value: function unsubscribeToStateChanges(onStateChange) {\n      this.subscriptions = this.subscriptions.filter(function (sub) {\n        return sub !== onStateChange;\n      });\n    }\n    /**\n     * Remove all listeners\n     */\n\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.subscriptions = [];\n      this.URLManager && this.URLManager.tearDown();\n    }\n    /**\n     * Retrieves all available acitons\n     *\n     * @returns Object All actions\n     */\n\n  }, {\n    key: \"getActions\",\n    value: function getActions() {\n      return this.actions;\n    }\n    /**\n     * Retrieve current state. Typically used on app initialization. Subsequent\n     * state updates should come through subscription.\n     *\n     * @returns Object Current state\n     */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      // We return a copy of state here, because we want to ensure the state\n      // inside of this object remains immutable.\n      return _objectSpread({}, this.state);\n    }\n  }]);\n\n  return SearchDriver;\n}();\n\nexport { SearchDriver as default };","map":{"version":3,"sources":["../src/SearchDriver.js"],"names":["current","filters","resultsPerPage","searchTerm","sortDirection","sortField","DEFAULT_STATE","autocompletedResults","autocompletedResultsRequestId","autocompletedSuggestions","autocompletedSuggestionsRequestId","error","isLoading","facets","requestId","results","resultSearchTerm","totalPages","totalResults","pagingStart","pagingEnd","wasSearched","conditionalFacets","facetKey","facet","acc","SearchDriver","apiConnector","autocompleteQuery","debug","initialState","onSearch","onAutocomplete","onResultClick","onAutocompleteResultClick","searchQuery","trackUrlState","urlPushDebounceLength","hasA11yNotifications","a11yNotificationMessages","alwaysSearchOnInitialLoad","actionName","action","Object","console","window","urlState","skipPushToUrl","a11y","searchParameters","filterSearchParameters","replaceUrl","autocompleteResults","autocompleteSuggestions","queryConfig","suggestions","searchQueryFilters","restOfSearchQuery","removeConditionalFacets","requestState","mergeFilters","resultState","start","end","messageArgs","newState","state","subscription","onStateChange","sub"],"mappings":"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","sourcesContent":["import URLManager from \"./URLManager\";\n\nimport RequestSequencer from \"./RequestSequencer\";\nimport DebounceManager from \"./DebounceManager\";\n\nimport * as actions from \"./actions\";\nimport Events from \"./Events\";\nimport { mergeFilters } from \"./helpers\";\n\nimport * as a11y from \"./A11yNotifications\";\n\nfunction filterSearchParameters({\n  current,\n  filters,\n  resultsPerPage,\n  searchTerm,\n  sortDirection,\n  sortField\n}) {\n  return {\n    current,\n    filters,\n    resultsPerPage,\n    searchTerm,\n    sortDirection,\n    sortField\n  };\n}\n\nexport const DEFAULT_STATE = {\n  // Search Parameters -- This is state that represents the input state.\n  current: 1,\n  filters: [],\n  resultsPerPage: 20,\n  searchTerm: \"\",\n  sortDirection: \"\",\n  sortField: \"\",\n  // Result State -- This state represents state that is updated automatically\n  // as the result of changing input state.\n  autocompletedResults: [],\n  autocompletedResultsRequestId: \"\",\n  autocompletedSuggestions: {},\n  autocompletedSuggestionsRequestId: \"\",\n  error: \"\",\n  isLoading: false,\n  facets: {},\n  requestId: \"\",\n  results: [],\n  resultSearchTerm: \"\",\n  totalPages: 0,\n  totalResults: 0,\n  pagingStart: 0,\n  pagingEnd: 0,\n  wasSearched: false\n};\n\nfunction removeConditionalFacets(\n  facets = {},\n  conditionalFacets = {},\n  filters = []\n) {\n  return Object.entries(facets).reduce((acc, [facetKey, facet]) => {\n    if (\n      conditionalFacets[facetKey] &&\n      typeof conditionalFacets[facetKey] === \"function\" &&\n      !conditionalFacets[facetKey]({ filters })\n    ) {\n      return acc;\n    }\n\n    acc[facetKey] = facet;\n    return acc;\n  }, {});\n}\n\n/*\n * The Driver is a framework agnostic search state manager that is capable\n * syncing state to the url.\n */\nexport default class SearchDriver {\n  state = DEFAULT_STATE;\n\n  constructor({\n    apiConnector,\n    autocompleteQuery = {},\n    debug,\n    initialState,\n    onSearch,\n    onAutocomplete,\n    onResultClick,\n    onAutocompleteResultClick,\n    searchQuery = {},\n    trackUrlState = true,\n    urlPushDebounceLength = 500,\n    hasA11yNotifications = false,\n    a11yNotificationMessages = {},\n    alwaysSearchOnInitialLoad = false\n  }) {\n    this.actions = Object.entries(actions).reduce(\n      (acc, [actionName, action]) => {\n        return {\n          ...acc,\n          [actionName]: action.bind(this)\n        };\n      },\n      {}\n    );\n    Object.assign(this, this.actions);\n\n    this.events = new Events({\n      apiConnector,\n      onSearch,\n      onAutocomplete,\n      onResultClick,\n      onAutocompleteResultClick\n    });\n\n    this.debug = debug;\n    if (this.debug) {\n      console.warn(\n        \"Search UI Debugging is enabled. This should be turned off in production deployments.\"\n      );\n      window.searchUI = this;\n    }\n    this.autocompleteRequestSequencer = new RequestSequencer();\n    this.searchRequestSequencer = new RequestSequencer();\n    this.debounceManager = new DebounceManager();\n    this.autocompleteQuery = autocompleteQuery;\n    this.searchQuery = searchQuery;\n    this.subscriptions = [];\n    this.trackUrlState = trackUrlState;\n    this.urlPushDebounceLength = urlPushDebounceLength;\n    this.alwaysSearchOnInitialLoad = alwaysSearchOnInitialLoad;\n\n    let urlState;\n    if (trackUrlState) {\n      this.URLManager = new URLManager();\n      urlState = this.URLManager.getStateFromURL();\n      this.URLManager.onURLStateChange(urlState => {\n        this._updateSearchResults(\n          { ...DEFAULT_STATE, ...urlState },\n          { skipPushToUrl: true }\n        );\n      });\n    } else {\n      urlState = {};\n    }\n\n    // Manage screen reader accessible notifications\n    this.hasA11yNotifications = hasA11yNotifications;\n    if (this.hasA11yNotifications) a11y.getLiveRegion();\n\n    this.a11yNotificationMessages = {\n      ...a11y.defaultMessages,\n      ...a11yNotificationMessages\n    };\n\n    // Remember the state this application is initialized into, so that we can\n    // reset to it later.\n    this.startingState = {\n      ...this.state,\n      ...initialState\n    };\n\n    // We filter these here to disallow anything other than valid search\n    // parameters to be passed in initial state, or url state. `results`, etc,\n    // should not be allowed to be passed in, that should be generated based on\n    // the results of the query\n    const searchParameters = filterSearchParameters({\n      ...this.startingState,\n      ...urlState\n    });\n\n    // Initialize the state without calling _setState, because we don't\n    // want to trigger an update callback, we're just initializing the state\n    // to the correct default values for the initial UI render\n    this.state = {\n      ...this.state,\n      ...searchParameters\n    };\n\n    // We'll trigger an initial search if initial parameters contain\n    // a search term or filters, or if alwaysSearchOnInitialLoad is set.\n    // Otherwise, we'll just save their selections in state as initial values.\n    if (\n      searchParameters.searchTerm ||\n      searchParameters.filters.length > 0 ||\n      this.alwaysSearchOnInitialLoad\n    ) {\n      this._updateSearchResults(searchParameters, { replaceUrl: true });\n    }\n  }\n\n  /**\n   * This method is used to update state and trigger a new autocomplete search.\n   *\n   * @param {string} searchTerm\n   * @param {Object=} Object\n   * @param {boolean|Object} options.autocompleteResults - Should autocomplete results\n   * @param {boolean|Object} options.autocompleteSuggestions - Should autocomplete suggestions\n   */\n  _updateAutocomplete = (\n    searchTerm,\n    { autocompleteResults, autocompleteSuggestions } = {}\n  ) => {\n    const requestId = this.autocompleteRequestSequencer.next();\n\n    const queryConfig = {\n      ...(autocompleteResults && {\n        results: this.autocompleteQuery.results || {}\n      }),\n      ...(autocompleteSuggestions && {\n        suggestions: this.autocompleteQuery.suggestions || {}\n      })\n    };\n\n    return this.events\n      .autocomplete({ searchTerm }, queryConfig)\n      .then(autocompleted => {\n        if (this.autocompleteRequestSequencer.isOldRequest(requestId)) return;\n        this.autocompleteRequestSequencer.completed(requestId);\n\n        this._setState(autocompleted);\n      });\n  };\n\n  /**\n   * This method is used to update state and trigger a new search.\n   *\n   * @typedef {Object} RequestState\n   * @property {number} current\n   * @property {number} resultsPerPage\n   * @property {string} searchTerm\n   * @property {string} sortDirection\n   * @property {string} sortField\n   *\n   * @param {RequestState} searchParameters - RequestState\n   * @param {Object=} Object\n   * @param {boolean} options.skipPushToUrl - Skip pushing the updated to the URL\n   * @param {boolean} options.replaceUrl - When pushing state to the URL, use history 'replace'\n   * rather than 'push' to avoid adding a new history entry\n   */\n  _updateSearchResults = (\n    searchParameters,\n    { skipPushToUrl = false, replaceUrl = false } = {}\n  ) => {\n    const {\n      current,\n      filters,\n      resultsPerPage,\n      searchTerm,\n      sortDirection,\n      sortField\n    } = {\n      ...this.state,\n      ...searchParameters\n    };\n\n    // State updates should always be applied in the order that they are made. This function, _updateSearchResults,\n    // makes state updates.\n    // In the case where a call to \"_updateSearchResults\" was made and delayed for X amount of time using\n    // `debounceManager.runWithDebounce`, and a subsequent call is made _updateSearchResults before that delay ends, we\n    // want to make sure that outstanding call to \"_updateSearchResults\" is cancelled, as it would apply state updates\n    // out of order.\n    this.debounceManager.cancelByName(\"_updateSearchResults\");\n\n    this._setState({\n      current,\n      error: \"\",\n      filters,\n      resultsPerPage,\n      searchTerm,\n      sortDirection,\n      sortField\n    });\n\n    this._makeSearchRequest({\n      skipPushToUrl,\n      replaceUrl\n    });\n  };\n\n  /**\n   * This method is separated out from _updateSearchResults so that it\n   * can be debounced.\n   *\n   * By debouncing our API calls, we can effectively allow action chaining.\n   *\n   * For Ex:\n   *\n   * If a user needs to make multiple filter updates at once, they could\n   * do so by calling an action 3 times in a row:\n   *\n   *   addFilter(\"states\", \"California\");\n   *   addFilter(\"states\", \"Nebraska\");\n   *   addFilter(\"states\", \"Pennsylvania\");\n   *\n   * We don't want to make 3 separate API calls like that in quick succession,\n   * so we debounce the API calls.\n   *\n   * Application state updates are performed in _updateSearchResults, but we\n   * wait to make the actual API calls until all actions have been called.\n   *\n   * @param {Object} options\n   * @param {boolean} options.skipPushToUrl - Skip pushing the updated to the URL\n   * @param {boolean} options.replaceUrl - When pushing state to the URL, use history 'replace'\n   * rather than 'push' to avoid adding a new history entry\n   */\n  _makeSearchRequest = DebounceManager.debounce(\n    0,\n    ({ skipPushToUrl, replaceUrl }) => {\n      const {\n        current,\n        filters,\n        resultsPerPage,\n        searchTerm,\n        sortDirection,\n        sortField\n      } = this.state;\n\n      this._setState({\n        isLoading: true\n      });\n\n      const requestId = this.searchRequestSequencer.next();\n\n      const {\n        // eslint-disable-next-line no-unused-vars\n        filters: searchQueryFilters,\n        conditionalFacets: conditionalFacets,\n        ...restOfSearchQuery\n      } = this.searchQuery;\n\n      const queryConfig = {\n        ...restOfSearchQuery,\n        facets: removeConditionalFacets(\n          this.searchQuery.facets,\n          conditionalFacets,\n          filters\n        )\n      };\n      const requestState = {\n        ...filterSearchParameters(this.state),\n        filters: mergeFilters(filters, this.searchQuery.filters)\n      };\n\n      return this.events.search(requestState, queryConfig).then(\n        resultState => {\n          if (this.searchRequestSequencer.isOldRequest(requestId)) return;\n          this.searchRequestSequencer.completed(requestId);\n\n          // Results paging start & end\n          const { totalResults } = resultState;\n          const start =\n            totalResults === 0 ? 0 : (current - 1) * resultsPerPage + 1;\n          const end =\n            totalResults <= start + resultsPerPage\n              ? totalResults\n              : start + resultsPerPage - 1;\n\n          this._setState({\n            isLoading: false,\n            resultSearchTerm: searchTerm,\n            pagingStart: start,\n            pagingEnd: end,\n            ...resultState,\n            wasSearched: true\n          });\n\n          if (this.hasA11yNotifications) {\n            const messageArgs = { start, end, totalResults, searchTerm };\n            this.actions.a11yNotify(\"searchResults\", messageArgs);\n          }\n\n          if (!skipPushToUrl && this.trackUrlState) {\n            // We debounce here so that we don't get a lot of intermediary\n            // URL state if someone is updating a UI really fast, like typing\n            // in a live search box for instance.\n            this.debounceManager.runWithDebounce(\n              this.urlPushDebounceLength,\n              \"pushStateToURL\",\n              this.URLManager.pushStateToURL.bind(this.URLManager),\n              {\n                current,\n                filters,\n                resultsPerPage,\n                searchTerm,\n                sortDirection,\n                sortField\n              },\n              { replaceUrl }\n            );\n          }\n        },\n        error => {\n          this._setState({\n            error: `An unexpected error occurred: ${error.message}`\n          });\n        }\n      );\n    }\n  );\n\n  _setState(newState) {\n    const state = { ...this.state, ...newState };\n    // eslint-disable-next-line no-console\n    if (this.debug) console.log(\"Search UI: State Update\", newState, state);\n    this.state = state;\n    this.subscriptions.forEach(subscription => subscription(state));\n  }\n\n  /**\n   * Dynamically update the searchQuery configuration in this driver.\n   * This will issue a new query after being updated.\n   *\n   * @param Object searchQuery\n   */\n  setSearchQuery(searchQuery) {\n    this.searchQuery = searchQuery;\n    this._updateSearchResults();\n  }\n\n  /**\n   * @param Object autocompleteQuery\n   */\n  setAutocompleteQuery(autocompleteQuery) {\n    this.autocompleteQuery = autocompleteQuery;\n  }\n\n  /**\n   * Any time state is updated in this Driver, the provided callback\n   * will be executed with the updated state.\n   *\n   * @param onStateChange Function\n   */\n  subscribeToStateChanges(onStateChange) {\n    this.subscriptions.push(onStateChange);\n  }\n\n  /**\n   * @param onStateChange Function\n   */\n  unsubscribeToStateChanges(onStateChange) {\n    this.subscriptions = this.subscriptions.filter(\n      sub => sub !== onStateChange\n    );\n  }\n\n  /**\n   * Remove all listeners\n   */\n  tearDown() {\n    this.subscriptions = [];\n    this.URLManager && this.URLManager.tearDown();\n  }\n\n  /**\n   * Retrieves all available acitons\n   *\n   * @returns Object All actions\n   */\n  getActions() {\n    return this.actions;\n  }\n\n  /**\n   * Retrieve current state. Typically used on app initialization. Subsequent\n   * state updates should come through subscription.\n   *\n   * @returns Object Current state\n   */\n  getState() {\n    // We return a copy of state here, because we want to ensure the state\n    // inside of this object remains immutable.\n    return { ...this.state };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}