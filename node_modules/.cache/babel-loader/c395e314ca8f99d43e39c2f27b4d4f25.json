{"ast":null,"code":"/**\n * This helper creates a live region that announces the results of certain\n * actions (e.g. searching, paging, etc.), that are otherwise invisible\n * to screen reader users.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nvar regionId = \"search-ui-screen-reader-notifications\";\nvar hasDOM = typeof document !== \"undefined\"; // Prevent errors in SSR apps\n\nvar getLiveRegion = function getLiveRegion() {\n  if (!hasDOM) return;\n  var region = document.getElementById(regionId);\n  if (region) return region;\n  region = document.createElement(\"div\");\n  region.id = regionId;\n  region.setAttribute(\"role\", \"status\");\n  region.setAttribute(\"aria-live\", \"polite\");\n  /**\n   * Visually-hidden CSS that's still available to screen readers.\n   * We're avoiding putting this in a stylesheet to ensure that this\n   * still works for users that opt for custom views & CSS. We're\n   * also opting to use CSSOM instead of inline styles to avoid\n   * Content Security Policy warnings.\n   *\n   * @see https://accessibility.18f.gov/hidden-content/\n   */\n\n  region.style.position = \"absolute\";\n  region.style.width = \"1px\";\n  region.style.height = \"1px\";\n  region.style.margin = \"-1px\";\n  region.style.padding = \"0\";\n  region.style.border = \"0\";\n  region.style.overflow = \"hidden\";\n  region.style.clip = \"rect(0 0 0 0)\";\n  document.body.appendChild(region);\n  return region;\n};\n\nvar announceToScreenReader = function announceToScreenReader(announcement) {\n  if (hasDOM) {\n    var region = getLiveRegion();\n    region.textContent = announcement;\n  }\n};\n\nvar defaultMessages = {\n  searchResults: function searchResults(_ref) {\n    var start = _ref.start,\n        end = _ref.end,\n        totalResults = _ref.totalResults,\n        searchTerm = _ref.searchTerm;\n    var message = \"Showing \".concat(start, \" to \").concat(end, \" results out of \").concat(totalResults);\n    if (searchTerm) message += \", searching for \\\"\".concat(searchTerm, \"\\\".\");\n    return message;\n  }\n};\nexport { getLiveRegion, announceToScreenReader, defaultMessages };","map":{"version":3,"sources":["../src/A11yNotifications.js"],"names":["regionId","hasDOM","getLiveRegion","region","document","announceToScreenReader","defaultMessages","searchResults","start","end","totalResults","searchTerm","message"],"mappings":"AAAA;;;;;;;AAOA,IAAMA,QAAQ,GAAd,uCAAA;AACA,IAAMC,MAAM,GAAG,OAAA,QAAA,KAAf,WAAA,C,CAAgD;;AAEhD,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,MAAI,CAAJ,MAAA,EAAa;AAEb,MAAIC,MAAM,GAAGC,QAAQ,CAARA,cAAAA,CAAb,QAAaA,CAAb;AACA,MAAA,MAAA,EAAY,OAAA,MAAA;AAEZD,EAAAA,MAAM,GAAGC,QAAQ,CAARA,aAAAA,CAATD,KAASC,CAATD;AACAA,EAAAA,MAAM,CAANA,EAAAA,GAAAA,QAAAA;AACAA,EAAAA,MAAM,CAANA,YAAAA,CAAAA,MAAAA,EAAAA,QAAAA;AACAA,EAAAA,MAAM,CAANA,YAAAA,CAAAA,WAAAA,EAAAA,QAAAA;AAEA;;;;;;;;;;AASAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,QAAAA,GAAAA,UAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,KAAAA,GAAAA,KAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA,GAAAA,KAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA,GAAAA,MAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,OAAAA,GAAAA,GAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA,GAAAA,GAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,QAAAA,GAAAA,QAAAA;AACAA,EAAAA,MAAM,CAANA,KAAAA,CAAAA,IAAAA,GAAAA,eAAAA;AAEAC,EAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,MAAAA;AACA,SAAA,MAAA;AA9BF,CAAA;;AAiCA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,YAAA,EAAgB;AAC7C,MAAA,MAAA,EAAY;AACV,QAAMF,MAAM,GAAGD,aAAf,EAAA;AACAC,IAAAA,MAAM,CAANA,WAAAA,GAAAA,YAAAA;AACD;AAJH,CAAA;;AAOA,IAAMG,eAAe,GAAG;AACtBC,EAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,IAAA,EAA8C;AAAA,QAA3CC,KAA2C,GAAA,IAAA,CAA3CA,KAA2C;AAAA,QAApCC,GAAoC,GAAA,IAAA,CAApCA,GAAoC;AAAA,QAA/BC,YAA+B,GAAA,IAAA,CAA/BA,YAA+B;AAAA,QAAjBC,UAAiB,GAAA,IAAA,CAAjBA,UAAiB;AAC3D,QAAIC,OAAO,GAAA,WAAA,MAAA,CAAA,KAAA,EAAA,MAAA,EAAA,MAAA,CAAA,GAAA,EAAA,kBAAA,EAAA,MAAA,CAAX,YAAW,CAAX;AACA,QAAA,UAAA,EAAgBA,OAAO,IAAA,qBAAA,MAAA,CAAA,UAAA,EAAPA,KAAO,CAAPA;AAChB,WAAA,OAAA;AACD;AALqB,CAAxB;AAQA,SAAA,aAAA,EAAA,sBAAA,EAAA,eAAA","sourcesContent":["/**\n * This helper creates a live region that announces the results of certain\n * actions (e.g. searching, paging, etc.), that are otherwise invisible\n * to screen reader users.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n */\nconst regionId = \"search-ui-screen-reader-notifications\";\nconst hasDOM = typeof document !== \"undefined\"; // Prevent errors in SSR apps\n\nconst getLiveRegion = () => {\n  if (!hasDOM) return;\n\n  let region = document.getElementById(regionId);\n  if (region) return region;\n\n  region = document.createElement(\"div\");\n  region.id = regionId;\n  region.setAttribute(\"role\", \"status\");\n  region.setAttribute(\"aria-live\", \"polite\");\n\n  /**\n   * Visually-hidden CSS that's still available to screen readers.\n   * We're avoiding putting this in a stylesheet to ensure that this\n   * still works for users that opt for custom views & CSS. We're\n   * also opting to use CSSOM instead of inline styles to avoid\n   * Content Security Policy warnings.\n   *\n   * @see https://accessibility.18f.gov/hidden-content/\n   */\n  region.style.position = \"absolute\";\n  region.style.width = \"1px\";\n  region.style.height = \"1px\";\n  region.style.margin = \"-1px\";\n  region.style.padding = \"0\";\n  region.style.border = \"0\";\n  region.style.overflow = \"hidden\";\n  region.style.clip = \"rect(0 0 0 0)\";\n\n  document.body.appendChild(region);\n  return region;\n};\n\nconst announceToScreenReader = announcement => {\n  if (hasDOM) {\n    const region = getLiveRegion();\n    region.textContent = announcement;\n  }\n};\n\nconst defaultMessages = {\n  searchResults: ({ start, end, totalResults, searchTerm }) => {\n    let message = `Showing ${start} to ${end} results out of ${totalResults}`;\n    if (searchTerm) message += `, searching for \"${searchTerm}\".`;\n    return message;\n  }\n};\n\nexport { getLiveRegion, announceToScreenReader, defaultMessages };\n"]},"metadata":{},"sourceType":"module"}