{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport { MultiCheckboxFacet } from \"@elastic/react-search-ui-views\";\nimport { helpers } from \"@elastic/search-ui\";\nimport { Facet, Filter, FilterType } from \"../types\";\nimport { accentFold } from \"../helpers\";\nimport { withSearch } from \"..\";\nvar markSelectedFacetValuesFromFilters = helpers.markSelectedFacetValuesFromFilters;\nexport var FacetContainer = /*#__PURE__*/function (_Component) {\n  _inherits(FacetContainer, _Component);\n\n  var _super = _createSuper(FacetContainer);\n\n  function FacetContainer(_ref) {\n    var _this;\n\n    var _ref$show = _ref.show,\n        show = _ref$show === void 0 ? 5 : _ref$show;\n\n    _classCallCheck(this, FacetContainer);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClickMore\", function (totalOptions) {\n      _this.setState(function (_ref2) {\n        var more = _ref2.more;\n        var visibleOptionsCount = more + 10;\n        var showingAll = visibleOptionsCount >= totalOptions;\n        if (showingAll) visibleOptionsCount = totalOptions;\n\n        _this.props.a11yNotify(\"moreFilters\", {\n          visibleOptionsCount: visibleOptionsCount,\n          showingAll: showingAll\n        });\n\n        return {\n          more: visibleOptionsCount\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFacetSearch\", function (searchTerm) {\n      _this.setState({\n        searchTerm: searchTerm\n      });\n    });\n\n    _this.state = {\n      more: show,\n      searchTerm: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(FacetContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          more = _this$state.more,\n          searchTerm = _this$state.searchTerm;\n\n      var _this$props = this.props,\n          addFilter = _this$props.addFilter,\n          className = _this$props.className,\n          facets = _this$props.facets,\n          field = _this$props.field,\n          filterType = _this$props.filterType,\n          filters = _this$props.filters,\n          label = _this$props.label,\n          removeFilter = _this$props.removeFilter,\n          setFilter = _this$props.setFilter,\n          view = _this$props.view,\n          isFilterable = _this$props.isFilterable,\n          a11yNotify = _this$props.a11yNotify,\n          rest = _objectWithoutProperties(_this$props, [\"addFilter\", \"className\", \"facets\", \"field\", \"filterType\", \"filters\", \"label\", \"removeFilter\", \"setFilter\", \"view\", \"isFilterable\", \"a11yNotify\"]);\n\n      var facetsForField = facets[field];\n      if (!facetsForField) return null; // By using `[0]`, we are currently assuming only 1 facet per field. This will likely be enforced\n      // in future version, so instead of an array, there will only be one facet allowed per field.\n\n      var facet = facetsForField[0];\n      var facetValues = markSelectedFacetValuesFromFilters(facet, filters, field, filterType).data;\n      var selectedValues = facetValues.filter(function (fv) {\n        return fv.selected;\n      }).map(function (fv) {\n        return fv.value;\n      });\n      if (!facetValues.length && !selectedValues.length) return null;\n\n      if (searchTerm.trim()) {\n        facetValues = facetValues.filter(function (option) {\n          return accentFold(option.value).toLowerCase().includes(accentFold(searchTerm).toLowerCase());\n        });\n      }\n\n      var View = view || MultiCheckboxFacet;\n      return View(_objectSpread({\n        className: className,\n        label: label,\n        onMoreClick: this.handleClickMore.bind(this, facetValues.length),\n        onRemove: function onRemove(value) {\n          removeFilter(field, value, filterType);\n        },\n        onChange: function onChange(value) {\n          setFilter(field, value, filterType);\n        },\n        onSelect: function onSelect(value) {\n          addFilter(field, value, filterType);\n        },\n        options: facetValues.slice(0, more),\n        showMore: facetValues.length > more,\n        values: selectedValues,\n        showSearch: isFilterable,\n        onSearch: function onSearch(value) {\n          _this2.handleFacetSearch(value);\n        },\n        searchPlaceholder: \"Filter \".concat(field)\n      }, rest));\n    }\n  }]);\n\n  return FacetContainer;\n}(Component);\n\n_defineProperty(FacetContainer, \"propTypes\", {\n  // Props\n  className: PropTypes.string,\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  filterType: FilterType,\n  show: PropTypes.number,\n  view: PropTypes.func,\n  isFilterable: PropTypes.bool,\n  // State\n  filters: PropTypes.arrayOf(Filter).isRequired,\n  facets: PropTypes.objectOf(PropTypes.arrayOf(Facet)).isRequired,\n  // Actions\n  addFilter: PropTypes.func.isRequired,\n  removeFilter: PropTypes.func.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  a11yNotify: PropTypes.func.isRequired\n});\n\n_defineProperty(FacetContainer, \"defaultProps\", {\n  filterType: \"all\",\n  isFilterable: false\n});\n\nexport default withSearch(function (_ref3) {\n  var filters = _ref3.filters,\n      facets = _ref3.facets,\n      addFilter = _ref3.addFilter,\n      removeFilter = _ref3.removeFilter,\n      setFilter = _ref3.setFilter,\n      a11yNotify = _ref3.a11yNotify;\n  return {\n    filters: filters,\n    facets: facets,\n    addFilter: addFilter,\n    removeFilter: removeFilter,\n    setFilter: setFilter,\n    a11yNotify: a11yNotify\n  };\n})(FacetContainer);","map":{"version":3,"sources":["../../src/containers/Facet.js"],"names":["markSelectedFacetValuesFromFilters","helpers","FacetContainer","className","PropTypes","field","label","filterType","show","view","isFilterable","filters","facets","addFilter","removeFilter","setFilter","a11yNotify","isRequired","more","searchTerm","visibleOptionsCount","showingAll","rest","facetsForField","facet","facetValues","selectedValues","fv","accentFold","option","View","onMoreClick","onRemove","onChange","onSelect","options","showMore","values","showSearch","onSearch","searchPlaceholder"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport { Component } from \"react\";\nimport { MultiCheckboxFacet } from \"@elastic/react-search-ui-views\";\nimport { helpers } from \"@elastic/search-ui\";\n\nimport { Facet, Filter, FilterType } from \"../types\";\nimport { accentFold } from \"../helpers\";\nimport { withSearch } from \"..\";\n\nconst { markSelectedFacetValuesFromFilters } = helpers;\n\nexport class FacetContainer extends Component {\n  static propTypes = {\n    // Props\n    className: PropTypes.string,\n    field: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    filterType: FilterType,\n    show: PropTypes.number,\n    view: PropTypes.func,\n    isFilterable: PropTypes.bool,\n    // State\n    filters: PropTypes.arrayOf(Filter).isRequired,\n    facets: PropTypes.objectOf(PropTypes.arrayOf(Facet)).isRequired,\n    // Actions\n    addFilter: PropTypes.func.isRequired,\n    removeFilter: PropTypes.func.isRequired,\n    setFilter: PropTypes.func.isRequired,\n    a11yNotify: PropTypes.func.isRequired\n  };\n\n  static defaultProps = {\n    filterType: \"all\",\n    isFilterable: false\n  };\n\n  constructor({ show = 5 }) {\n    super();\n    this.state = {\n      more: show,\n      searchTerm: \"\"\n    };\n  }\n\n  handleClickMore = totalOptions => {\n    this.setState(({ more }) => {\n      let visibleOptionsCount = more + 10;\n      const showingAll = visibleOptionsCount >= totalOptions;\n      if (showingAll) visibleOptionsCount = totalOptions;\n\n      this.props.a11yNotify(\"moreFilters\", { visibleOptionsCount, showingAll });\n\n      return { more: visibleOptionsCount };\n    });\n  };\n\n  handleFacetSearch = searchTerm => {\n    this.setState({ searchTerm });\n  };\n\n  render() {\n    const { more, searchTerm } = this.state;\n    const {\n      addFilter,\n      className,\n      facets,\n      field,\n      filterType,\n      filters,\n      label,\n      removeFilter,\n      setFilter,\n      view,\n      isFilterable,\n      // eslint-disable-next-line no-unused-vars\n      a11yNotify,\n      ...rest\n    } = this.props;\n    const facetsForField = facets[field];\n\n    if (!facetsForField) return null;\n\n    // By using `[0]`, we are currently assuming only 1 facet per field. This will likely be enforced\n    // in future version, so instead of an array, there will only be one facet allowed per field.\n    const facet = facetsForField[0];\n\n    let facetValues = markSelectedFacetValuesFromFilters(\n      facet,\n      filters,\n      field,\n      filterType\n    ).data;\n\n    const selectedValues = facetValues\n      .filter(fv => fv.selected)\n      .map(fv => fv.value);\n\n    if (!facetValues.length && !selectedValues.length) return null;\n\n    if (searchTerm.trim()) {\n      facetValues = facetValues.filter(option =>\n        accentFold(option.value)\n          .toLowerCase()\n          .includes(accentFold(searchTerm).toLowerCase())\n      );\n    }\n\n    const View = view || MultiCheckboxFacet;\n\n    return View({\n      className,\n      label: label,\n      onMoreClick: this.handleClickMore.bind(this, facetValues.length),\n      onRemove: value => {\n        removeFilter(field, value, filterType);\n      },\n      onChange: value => {\n        setFilter(field, value, filterType);\n      },\n      onSelect: value => {\n        addFilter(field, value, filterType);\n      },\n      options: facetValues.slice(0, more),\n      showMore: facetValues.length > more,\n      values: selectedValues,\n      showSearch: isFilterable,\n      onSearch: value => {\n        this.handleFacetSearch(value);\n      },\n      searchPlaceholder: `Filter ${field}`,\n      ...rest\n    });\n  }\n}\n\nexport default withSearch(\n  ({ filters, facets, addFilter, removeFilter, setFilter, a11yNotify }) => ({\n    filters,\n    facets,\n    addFilter,\n    removeFilter,\n    setFilter,\n    a11yNotify\n  })\n)(FacetContainer);\n"]},"metadata":{},"sourceType":"module"}