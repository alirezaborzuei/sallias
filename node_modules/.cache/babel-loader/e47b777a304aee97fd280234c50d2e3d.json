{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { appendClassName } from \"../view-helpers\";\n\nvar LayoutSidebar = /*#__PURE__*/function (_React$Component) {\n  _inherits(LayoutSidebar, _React$Component);\n\n  var _super = _createSuper(LayoutSidebar);\n\n  function LayoutSidebar(props) {\n    var _this;\n\n    _classCallCheck(this, LayoutSidebar);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleSidebar\", function () {\n      _this.setState(function (_ref) {\n        var isSidebarToggled = _ref.isSidebarToggled;\n        return {\n          isSidebarToggled: !isSidebarToggled\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderToggleButton\", function (label) {\n      if (!_this.props.children) return null;\n      return /*#__PURE__*/React.createElement(\"button\", {\n        hidden: true,\n        type: \"button\",\n        className: \"sui-layout-sidebar-toggle\",\n        onClick: _this.toggleSidebar\n      }, label);\n    });\n\n    _this.state = {\n      isSidebarToggled: false\n    };\n    return _this;\n  }\n\n  _createClass(LayoutSidebar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children;\n      var isSidebarToggled = this.state.isSidebarToggled;\n      var classes = appendClassName(className, isSidebarToggled ? \"\".concat(className, \"--toggled\") : null);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.renderToggleButton(\"Show Filters\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes\n      }, this.renderToggleButton(\"Save Filters\"), children));\n    }\n  }]);\n\n  return LayoutSidebar;\n}(React.Component);\n\n_defineProperty(LayoutSidebar, \"propTypes\", {\n  className: PropTypes.string,\n  children: PropTypes.node\n});\n\nexport default LayoutSidebar;","map":{"version":3,"sources":["../../src/layouts/LayoutSidebar.js"],"names":["LayoutSidebar","React","Component","className","PropTypes","children","node","isSidebarToggled","toggleSidebar","classes","appendClassName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,KAAA,MAAA,OAAA;AAEA,SAAA,eAAA,QAAA,iBAAA;;IAEMA,a;;;;;AAMJ,WAAA,aAAA,CAAA,KAAA,EAAmB;AAAA,QAAA,KAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AACjB,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;;AADiB,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,eAAA,EAKH,YAAM;AACpB,MAAA,KAAA,CAAA,QAAA,CAAc,UAAA,IAAA,EAAA;AAAA,YAAGO,gBAAH,GAAA,IAAA,CAAA,gBAAA;AAAA,eAA2B;AACvCA,UAAAA,gBAAgB,EAAE,CAACA;AADoB,SAA3B;AAAd,OAAA;AANiB,KAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,sBAAA,CAAA,KAAA,CAAA,EAAA,oBAAA,EAWE,UAAA,KAAA,EAAS;AAC5B,UAAI,CAAC,KAAA,CAAA,KAAA,CAAL,QAAA,EAA0B,OAAA,IAAA;AAE1B,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AACE,QAAA,MAAM,EADR,IAAA;AAEE,QAAA,IAAI,EAFN,QAAA;AAGE,QAAA,SAAS,EAHX,2BAAA;AAIE,QAAA,OAAO,EAAE,KAAA,CAAKC;AAJhB,OAAA,EADF,KACE,CADF;AAdiB,KAAA,CAAA;;AAEjB,IAAA,KAAA,CAAA,KAAA,GAAa;AAAED,MAAAA,gBAAgB,EAAE;AAApB,KAAb;AAFiB,WAAA,KAAA;AAGlB;;;;6BAuBQ;AAAA,UAAA,WAAA,GACyB,KADzB,KAAA;AAAA,UACCJ,SADD,GAAA,WAAA,CAAA,SAAA;AAAA,UACYE,QADZ,GAAA,WAAA,CAAA,QAAA;AAAA,UAECE,gBAFD,GAEsB,KAFtB,KAEsB,CAFtB,gBAAA;AAIP,UAAME,OAAO,GAAGC,eAAe,CAAA,SAAA,EAE7BH,gBAAgB,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA,WAAA,CAAA,GAFlB,IAA+B,CAA/B;AAKA,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG,KAAA,kBAAA,CADH,cACG,CADH,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAEE;AAAhB,OAAA,EACG,KAAA,kBAAA,CADH,cACG,CADH,EAHJ,QAGI,CAFF,CADF;AASD;;;;EAlDyBR,KAAK,CAACC,S;;gBAA5BF,a,eACe;AACjBG,EAAAA,SAAS,EAAEC,SAAS,CADH,MAAA;AAEjBC,EAAAA,QAAQ,EAAED,SAAS,CAACE;AAFH,C;;AAoDrB,eAAA,aAAA","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { appendClassName } from \"../view-helpers\";\n\nclass LayoutSidebar extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    children: PropTypes.node\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { isSidebarToggled: false };\n  }\n\n  toggleSidebar = () => {\n    this.setState(({ isSidebarToggled }) => ({\n      isSidebarToggled: !isSidebarToggled\n    }));\n  };\n\n  renderToggleButton = label => {\n    if (!this.props.children) return null;\n\n    return (\n      <button\n        hidden\n        type=\"button\"\n        className=\"sui-layout-sidebar-toggle\"\n        onClick={this.toggleSidebar}\n      >\n        {label}\n      </button>\n    );\n  };\n\n  render() {\n    const { className, children } = this.props;\n    const { isSidebarToggled } = this.state;\n\n    const classes = appendClassName(\n      className,\n      isSidebarToggled ? `${className}--toggled` : null\n    );\n\n    return (\n      <>\n        {this.renderToggleButton(\"Show Filters\")}\n        <div className={classes}>\n          {this.renderToggleButton(\"Save Filters\")}\n          {children}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default LayoutSidebar;\n"]},"metadata":{},"sourceType":"module"}