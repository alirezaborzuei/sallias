import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import PropTypes from "prop-types";
import React from "react";
import Downshift from "downshift";
import { Result } from "./types";
import { Suggestion } from "./types";
import { appendClassName } from "./view-helpers";
import Autocomplete from "./Autocomplete";
import SearchInput from "./SearchInput";

function SearchBox(props) {
  var className = props.className,
      allAutocompletedItemsCount = props.allAutocompletedItemsCount,
      autocompleteView = props.autocompleteView,
      isFocused = props.isFocused,
      _props$inputProps = props.inputProps,
      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,
      inputView = props.inputView,
      onChange = props.onChange,
      onSelectAutocomplete = props.onSelectAutocomplete,
      _onSubmit = props.onSubmit,
      useAutocomplete = props.useAutocomplete,
      value = props.value,
      autocompletedResults = props.autocompletedResults,
      autocompletedSuggestions = props.autocompletedSuggestions,
      autocompletedSuggestionsCount = props.autocompletedSuggestionsCount,
      completeSuggestion = props.completeSuggestion,
      notifyAutocompleteSelected = props.notifyAutocompleteSelected,
      rest = _objectWithoutProperties(props, ["className", "allAutocompletedItemsCount", "autocompleteView", "isFocused", "inputProps", "inputView", "onChange", "onSelectAutocomplete", "onSubmit", "useAutocomplete", "value", "autocompletedResults", "autocompletedSuggestions", "autocompletedSuggestionsCount", "completeSuggestion", "notifyAutocompleteSelected"]);

  var focusedClass = isFocused ? "focus" : "";
  var AutocompleteView = autocompleteView || Autocomplete;
  var InputView = inputView || SearchInput;
  return /*#__PURE__*/React.createElement(Downshift, _extends({
    inputValue: value,
    onChange: onSelectAutocomplete,
    onInputValueChange: function onInputValueChange(newValue) {
      // To avoid over dispatching
      if (value === newValue) return;
      onChange(newValue);
    } // Because when a selection is made, we don't really want to change
    // the inputValue. This is supposed to be a "controlled" value, and when
    // this happens we lose control of it.
    ,
    itemToString: function itemToString() {
      return value;
    }
  }, rest), function (downshiftProps) {
    var closeMenu = downshiftProps.closeMenu,
        _getInputProps = downshiftProps.getInputProps,
        isOpen = downshiftProps.isOpen;
    var autocompleteClass = isOpen === true ? " autocomplete" : "";
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: function onSubmit(e) {
        closeMenu();

        _onSubmit(e);
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: appendClassName("sui-search-box", className) + autocompleteClass
    }, /*#__PURE__*/React.createElement(InputView, _extends({}, downshiftProps, {
      getInputProps: function getInputProps(additionalProps) {
        var _ref = additionalProps || {},
            className = _ref.className,
            rest = _objectWithoutProperties(_ref, ["className"]);

        return _getInputProps(_objectSpread(_objectSpread({
          placeholder: "Search"
        }, inputProps), {}, {
          className: appendClassName("sui-search-box__text-input", [inputProps.className, className, focusedClass])
        }, rest));
      },
      getButtonProps: function getButtonProps(additionalProps) {
        var _ref2 = additionalProps || {},
            className = _ref2.className,
            rest = _objectWithoutProperties(_ref2, ["className"]);

        return _objectSpread({
          type: "submit",
          value: "Search",
          className: appendClassName("button sui-search-box__submit", className)
        }, rest);
      },
      getAutocomplete: function getAutocomplete() {
        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {
          return /*#__PURE__*/React.createElement(AutocompleteView, _extends({}, props, downshiftProps));
        } else {
          return null;
        }
      }
    }))));
  });
}

SearchBox.propTypes = {
  // Provided by container
  allAutocompletedItemsCount: PropTypes.number.isRequired,
  autocompletedResults: PropTypes.arrayOf(Result).isRequired,
  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,
  autocompletedSuggestionsCount: PropTypes.number.isRequired,
  completeSuggestion: PropTypes.func.isRequired,
  notifyAutocompleteSelected: PropTypes.func.isRequired,
  onChange: PropTypes.func.isRequired,
  onSubmit: PropTypes.func.isRequired,
  value: PropTypes.string.isRequired,
  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
    titleField: PropTypes.string.isRequired,
    urlField: PropTypes.string.isRequired,
    linkTarget: PropTypes.string,
    sectionTitle: PropTypes.string
  })]),
  autocompleteView: PropTypes.func,
  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({
    sectionTitle: PropTypes.string
  }), PropTypes.objectOf(PropTypes.exact({
    sectionTitle: PropTypes.string
  }))]),
  className: PropTypes.string,
  inputProps: PropTypes.object,
  inputView: PropTypes.func,
  isFocused: PropTypes.bool,
  useAutocomplete: PropTypes.bool,
  // Specific configuration for this view only
  onSelectAutocomplete: PropTypes.func
};
export default SearchBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,