"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _types = require("./types");

var _viewHelpers = require("./view-helpers");

function getRaw(result, value) {
  if (!result[value] || !result[value].raw) return;
  return result[value].raw;
}

function getSnippet(result, value) {
  if (!result[value] || !result[value].snippet) return;
  return result[value].snippet;
}

function getSuggestionTitle(suggestionType, autocompleteSuggestions) {
  if (autocompleteSuggestions.sectionTitle) {
    return autocompleteSuggestions.sectionTitle;
  }

  if (autocompleteSuggestions[suggestionType] && autocompleteSuggestions[suggestionType].sectionTitle) {
    return autocompleteSuggestions[suggestionType].sectionTitle;
  }
}

function Autocomplete(_ref) {
  var autocompleteResults = _ref.autocompleteResults,
      autocompletedResults = _ref.autocompletedResults,
      autocompleteSuggestions = _ref.autocompleteSuggestions,
      autocompletedSuggestions = _ref.autocompletedSuggestions,
      className = _ref.className,
      getItemProps = _ref.getItemProps,
      getMenuProps = _ref.getMenuProps;
  var index = 0;
  return /*#__PURE__*/_react.default.createElement("div", getMenuProps({
    className: (0, _viewHelpers.appendClassName)("sui-search-box__autocomplete-container", className)
  }), /*#__PURE__*/_react.default.createElement("div", null, !!autocompleteSuggestions && Object.entries(autocompletedSuggestions).map(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
        suggestionType = _ref3[0],
        suggestions = _ref3[1];

    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: suggestionType
    }, getSuggestionTitle(suggestionType, autocompleteSuggestions) && suggestions.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: "sui-search-box__section-title"
    }, getSuggestionTitle(suggestionType, autocompleteSuggestions)), suggestions.length > 0 && /*#__PURE__*/_react.default.createElement("ul", {
      className: "sui-search-box__suggestion-list"
    }, suggestions.map(function (suggestion) {
      index++;
      return (
        /*#__PURE__*/
        // eslint-disable-next-line react/jsx-key
        _react.default.createElement("li", getItemProps({
          key: suggestion.suggestion || suggestion.highlight,
          index: index - 1,
          item: suggestion
        }), suggestion.highlight ? /*#__PURE__*/_react.default.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: suggestion.highlight
          }
        }) : /*#__PURE__*/_react.default.createElement("span", null, suggestion.suggestion))
      );
    })));
  }), !!autocompleteResults && !!autocompletedResults && autocompletedResults.length > 0 && autocompleteResults.sectionTitle && /*#__PURE__*/_react.default.createElement("div", {
    className: "sui-search-box__section-title"
  }, autocompleteResults.sectionTitle), !!autocompleteResults && !!autocompletedResults && autocompletedResults.length > 0 && /*#__PURE__*/_react.default.createElement("ul", {
    className: "sui-search-box__results-list"
  }, autocompletedResults.map(function (result) {
    index++;
    var titleSnippet = getSnippet(result, autocompleteResults.titleField);
    var titleRaw = getRaw(result, autocompleteResults.titleField);
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/jsx-key
      _react.default.createElement("li", getItemProps({
        key: result.id.raw,
        index: index - 1,
        item: result
      }), titleSnippet ? /*#__PURE__*/_react.default.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: titleSnippet
        }
      }) : /*#__PURE__*/_react.default.createElement("span", null, titleRaw))
    );
  }))));
}

Autocomplete.propTypes = {
  allAutocompletedItemsCount: _propTypes.default.number.isRequired,
  autocompleteResults: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
    titleField: _propTypes.default.string.isRequired,
    urlField: _propTypes.default.string.isRequired,
    linkTarget: _propTypes.default.string,
    sectionTitle: _propTypes.default.string
  })]),
  autocompletedResults: _propTypes.default.arrayOf(_types.Result).isRequired,
  autocompletedSuggestions: _propTypes.default.objectOf(_propTypes.default.arrayOf(_types.Suggestion)).isRequired,
  autocompletedSuggestionsCount: _propTypes.default.number.isRequired,
  autocompleteSuggestions: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.exact({
    sectionTitle: _propTypes.default.string
  }), _propTypes.default.objectOf(_propTypes.default.exact({
    sectionTitle: _propTypes.default.string
  }))]),
  getItemProps: _propTypes.default.func.isRequired,
  getMenuProps: _propTypes.default.func.isRequired,
  className: _propTypes.default.string
};
var _default = Autocomplete;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,