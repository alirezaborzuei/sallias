"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _downshift = _interopRequireDefault(require("downshift"));

var _types = require("./types");

var _viewHelpers = require("./view-helpers");

var _Autocomplete = _interopRequireDefault(require("./Autocomplete"));

var _SearchInput = _interopRequireDefault(require("./SearchInput"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SearchBox(props) {
  var className = props.className,
      allAutocompletedItemsCount = props.allAutocompletedItemsCount,
      autocompleteView = props.autocompleteView,
      isFocused = props.isFocused,
      _props$inputProps = props.inputProps,
      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,
      inputView = props.inputView,
      onChange = props.onChange,
      onSelectAutocomplete = props.onSelectAutocomplete,
      _onSubmit = props.onSubmit,
      useAutocomplete = props.useAutocomplete,
      value = props.value,
      autocompletedResults = props.autocompletedResults,
      autocompletedSuggestions = props.autocompletedSuggestions,
      autocompletedSuggestionsCount = props.autocompletedSuggestionsCount,
      completeSuggestion = props.completeSuggestion,
      notifyAutocompleteSelected = props.notifyAutocompleteSelected,
      rest = (0, _objectWithoutProperties2.default)(props, ["className", "allAutocompletedItemsCount", "autocompleteView", "isFocused", "inputProps", "inputView", "onChange", "onSelectAutocomplete", "onSubmit", "useAutocomplete", "value", "autocompletedResults", "autocompletedSuggestions", "autocompletedSuggestionsCount", "completeSuggestion", "notifyAutocompleteSelected"]);
  var focusedClass = isFocused ? "focus" : "";
  var AutocompleteView = autocompleteView || _Autocomplete.default;
  var InputView = inputView || _SearchInput.default;
  return /*#__PURE__*/_react.default.createElement(_downshift.default, (0, _extends2.default)({
    inputValue: value,
    onChange: onSelectAutocomplete,
    onInputValueChange: function onInputValueChange(newValue) {
      // To avoid over dispatching
      if (value === newValue) return;
      onChange(newValue);
    } // Because when a selection is made, we don't really want to change
    // the inputValue. This is supposed to be a "controlled" value, and when
    // this happens we lose control of it.
    ,
    itemToString: function itemToString() {
      return value;
    }
  }, rest), function (downshiftProps) {
    var closeMenu = downshiftProps.closeMenu,
        _getInputProps = downshiftProps.getInputProps,
        isOpen = downshiftProps.isOpen;
    var autocompleteClass = isOpen === true ? " autocomplete" : "";
    return /*#__PURE__*/_react.default.createElement("form", {
      onSubmit: function onSubmit(e) {
        closeMenu();

        _onSubmit(e);
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _viewHelpers.appendClassName)("sui-search-box", className) + autocompleteClass
    }, /*#__PURE__*/_react.default.createElement(InputView, (0, _extends2.default)({}, downshiftProps, {
      getInputProps: function getInputProps(additionalProps) {
        var _ref = additionalProps || {},
            className = _ref.className,
            rest = (0, _objectWithoutProperties2.default)(_ref, ["className"]);

        return _getInputProps(_objectSpread(_objectSpread({
          placeholder: "Search"
        }, inputProps), {}, {
          className: (0, _viewHelpers.appendClassName)("sui-search-box__text-input", [inputProps.className, className, focusedClass])
        }, rest));
      },
      getButtonProps: function getButtonProps(additionalProps) {
        var _ref2 = additionalProps || {},
            className = _ref2.className,
            rest = (0, _objectWithoutProperties2.default)(_ref2, ["className"]);

        return _objectSpread({
          type: "submit",
          value: "Search",
          className: (0, _viewHelpers.appendClassName)("button sui-search-box__submit", className)
        }, rest);
      },
      getAutocomplete: function getAutocomplete() {
        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {
          return /*#__PURE__*/_react.default.createElement(AutocompleteView, (0, _extends2.default)({}, props, downshiftProps));
        } else {
          return null;
        }
      }
    }))));
  });
}

SearchBox.propTypes = {
  // Provided by container
  allAutocompletedItemsCount: _propTypes.default.number.isRequired,
  autocompletedResults: _propTypes.default.arrayOf(_types.Result).isRequired,
  autocompletedSuggestions: _propTypes.default.objectOf(_propTypes.default.arrayOf(_types.Suggestion)).isRequired,
  autocompletedSuggestionsCount: _propTypes.default.number.isRequired,
  completeSuggestion: _propTypes.default.func.isRequired,
  notifyAutocompleteSelected: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onSubmit: _propTypes.default.func.isRequired,
  value: _propTypes.default.string.isRequired,
  autocompleteResults: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
    titleField: _propTypes.default.string.isRequired,
    urlField: _propTypes.default.string.isRequired,
    linkTarget: _propTypes.default.string,
    sectionTitle: _propTypes.default.string
  })]),
  autocompleteView: _propTypes.default.func,
  autocompleteSuggestions: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.exact({
    sectionTitle: _propTypes.default.string
  }), _propTypes.default.objectOf(_propTypes.default.exact({
    sectionTitle: _propTypes.default.string
  }))]),
  className: _propTypes.default.string,
  inputProps: _propTypes.default.object,
  inputView: _propTypes.default.func,
  isFocused: _propTypes.default.bool,
  useAutocomplete: _propTypes.default.bool,
  // Specific configuration for this view only
  onSelectAutocomplete: _propTypes.default.func
};
var _default = SearchBox;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,