import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import PropTypes from "prop-types";
import { Component } from "react";
import { MultiCheckboxFacet } from "@elastic/react-search-ui-views";
import { helpers } from "@elastic/search-ui";
import { Facet, Filter, FilterType } from "../types";
import { accentFold } from "../helpers";
import { withSearch } from "..";
var markSelectedFacetValuesFromFilters = helpers.markSelectedFacetValuesFromFilters;
export var FacetContainer = /*#__PURE__*/function (_Component) {
  _inherits(FacetContainer, _Component);

  var _super = _createSuper(FacetContainer);

  function FacetContainer(_ref) {
    var _this;

    var _ref$show = _ref.show,
        show = _ref$show === void 0 ? 5 : _ref$show;

    _classCallCheck(this, FacetContainer);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "handleClickMore", function (totalOptions) {
      _this.setState(function (_ref2) {
        var more = _ref2.more;
        var visibleOptionsCount = more + 10;
        var showingAll = visibleOptionsCount >= totalOptions;
        if (showingAll) visibleOptionsCount = totalOptions;

        _this.props.a11yNotify("moreFilters", {
          visibleOptionsCount: visibleOptionsCount,
          showingAll: showingAll
        });

        return {
          more: visibleOptionsCount
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleFacetSearch", function (searchTerm) {
      _this.setState({
        searchTerm: searchTerm
      });
    });

    _this.state = {
      more: show,
      searchTerm: ""
    };
    return _this;
  }

  _createClass(FacetContainer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          more = _this$state.more,
          searchTerm = _this$state.searchTerm;

      var _this$props = this.props,
          addFilter = _this$props.addFilter,
          className = _this$props.className,
          facets = _this$props.facets,
          field = _this$props.field,
          filterType = _this$props.filterType,
          filters = _this$props.filters,
          label = _this$props.label,
          removeFilter = _this$props.removeFilter,
          setFilter = _this$props.setFilter,
          view = _this$props.view,
          isFilterable = _this$props.isFilterable,
          a11yNotify = _this$props.a11yNotify,
          rest = _objectWithoutProperties(_this$props, ["addFilter", "className", "facets", "field", "filterType", "filters", "label", "removeFilter", "setFilter", "view", "isFilterable", "a11yNotify"]);

      var facetsForField = facets[field];
      if (!facetsForField) return null; // By using `[0]`, we are currently assuming only 1 facet per field. This will likely be enforced
      // in future version, so instead of an array, there will only be one facet allowed per field.

      var facet = facetsForField[0];
      var facetValues = markSelectedFacetValuesFromFilters(facet, filters, field, filterType).data;
      var selectedValues = facetValues.filter(function (fv) {
        return fv.selected;
      }).map(function (fv) {
        return fv.value;
      });
      if (!facetValues.length && !selectedValues.length) return null;

      if (searchTerm.trim()) {
        facetValues = facetValues.filter(function (option) {
          return accentFold(option.value).toLowerCase().includes(accentFold(searchTerm).toLowerCase());
        });
      }

      var View = view || MultiCheckboxFacet;
      return View(_objectSpread({
        className: className,
        label: label,
        onMoreClick: this.handleClickMore.bind(this, facetValues.length),
        onRemove: function onRemove(value) {
          removeFilter(field, value, filterType);
        },
        onChange: function onChange(value) {
          setFilter(field, value, filterType);
        },
        onSelect: function onSelect(value) {
          addFilter(field, value, filterType);
        },
        options: facetValues.slice(0, more),
        showMore: facetValues.length > more,
        values: selectedValues,
        showSearch: isFilterable,
        onSearch: function onSearch(value) {
          _this2.handleFacetSearch(value);
        },
        searchPlaceholder: "Filter ".concat(field)
      }, rest));
    }
  }]);

  return FacetContainer;
}(Component);

_defineProperty(FacetContainer, "propTypes", {
  // Props
  className: PropTypes.string,
  field: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  filterType: FilterType,
  show: PropTypes.number,
  view: PropTypes.func,
  isFilterable: PropTypes.bool,
  // State
  filters: PropTypes.arrayOf(Filter).isRequired,
  facets: PropTypes.objectOf(PropTypes.arrayOf(Facet)).isRequired,
  // Actions
  addFilter: PropTypes.func.isRequired,
  removeFilter: PropTypes.func.isRequired,
  setFilter: PropTypes.func.isRequired,
  a11yNotify: PropTypes.func.isRequired
});

_defineProperty(FacetContainer, "defaultProps", {
  filterType: "all",
  isFilterable: false
});

export default withSearch(function (_ref3) {
  var filters = _ref3.filters,
      facets = _ref3.facets,
      addFilter = _ref3.addFilter,
      removeFilter = _ref3.removeFilter,
      setFilter = _ref3.setFilter,
      a11yNotify = _ref3.a11yNotify;
  return {
    filters: filters,
    facets: facets,
    addFilter: addFilter,
    removeFilter: removeFilter,
    setFilter: setFilter,
    a11yNotify: a11yNotify
  };
})(FacetContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,