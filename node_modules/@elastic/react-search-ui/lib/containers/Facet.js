"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FacetContainer = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = require("react");

var _reactSearchUiViews = require("@elastic/react-search-ui-views");

var _searchUi = require("@elastic/search-ui");

var _types = require("../types");

var _helpers = require("../helpers");

var _ = require("..");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var markSelectedFacetValuesFromFilters = _searchUi.helpers.markSelectedFacetValuesFromFilters;

var FacetContainer = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(FacetContainer, _Component);

  var _super = _createSuper(FacetContainer);

  function FacetContainer(_ref) {
    var _this;

    var _ref$show = _ref.show,
        show = _ref$show === void 0 ? 5 : _ref$show;
    (0, _classCallCheck2.default)(this, FacetContainer);
    _this = _super.call(this);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleClickMore", function (totalOptions) {
      _this.setState(function (_ref2) {
        var more = _ref2.more;
        var visibleOptionsCount = more + 10;
        var showingAll = visibleOptionsCount >= totalOptions;
        if (showingAll) visibleOptionsCount = totalOptions;

        _this.props.a11yNotify("moreFilters", {
          visibleOptionsCount: visibleOptionsCount,
          showingAll: showingAll
        });

        return {
          more: visibleOptionsCount
        };
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleFacetSearch", function (searchTerm) {
      _this.setState({
        searchTerm: searchTerm
      });
    });
    _this.state = {
      more: show,
      searchTerm: ""
    };
    return _this;
  }

  (0, _createClass2.default)(FacetContainer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          more = _this$state.more,
          searchTerm = _this$state.searchTerm;
      var _this$props = this.props,
          addFilter = _this$props.addFilter,
          className = _this$props.className,
          facets = _this$props.facets,
          field = _this$props.field,
          filterType = _this$props.filterType,
          filters = _this$props.filters,
          label = _this$props.label,
          removeFilter = _this$props.removeFilter,
          setFilter = _this$props.setFilter,
          view = _this$props.view,
          isFilterable = _this$props.isFilterable,
          a11yNotify = _this$props.a11yNotify,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["addFilter", "className", "facets", "field", "filterType", "filters", "label", "removeFilter", "setFilter", "view", "isFilterable", "a11yNotify"]);
      var facetsForField = facets[field];
      if (!facetsForField) return null; // By using `[0]`, we are currently assuming only 1 facet per field. This will likely be enforced
      // in future version, so instead of an array, there will only be one facet allowed per field.

      var facet = facetsForField[0];
      var facetValues = markSelectedFacetValuesFromFilters(facet, filters, field, filterType).data;
      var selectedValues = facetValues.filter(function (fv) {
        return fv.selected;
      }).map(function (fv) {
        return fv.value;
      });
      if (!facetValues.length && !selectedValues.length) return null;

      if (searchTerm.trim()) {
        facetValues = facetValues.filter(function (option) {
          return (0, _helpers.accentFold)(option.value).toLowerCase().includes((0, _helpers.accentFold)(searchTerm).toLowerCase());
        });
      }

      var View = view || _reactSearchUiViews.MultiCheckboxFacet;
      return View(_objectSpread({
        className: className,
        label: label,
        onMoreClick: this.handleClickMore.bind(this, facetValues.length),
        onRemove: function onRemove(value) {
          removeFilter(field, value, filterType);
        },
        onChange: function onChange(value) {
          setFilter(field, value, filterType);
        },
        onSelect: function onSelect(value) {
          addFilter(field, value, filterType);
        },
        options: facetValues.slice(0, more),
        showMore: facetValues.length > more,
        values: selectedValues,
        showSearch: isFilterable,
        onSearch: function onSearch(value) {
          _this2.handleFacetSearch(value);
        },
        searchPlaceholder: "Filter ".concat(field)
      }, rest));
    }
  }]);
  return FacetContainer;
}(_react.Component);

exports.FacetContainer = FacetContainer;
(0, _defineProperty2.default)(FacetContainer, "propTypes", {
  // Props
  className: _propTypes.default.string,
  field: _propTypes.default.string.isRequired,
  label: _propTypes.default.string.isRequired,
  filterType: _types.FilterType,
  show: _propTypes.default.number,
  view: _propTypes.default.func,
  isFilterable: _propTypes.default.bool,
  // State
  filters: _propTypes.default.arrayOf(_types.Filter).isRequired,
  facets: _propTypes.default.objectOf(_propTypes.default.arrayOf(_types.Facet)).isRequired,
  // Actions
  addFilter: _propTypes.default.func.isRequired,
  removeFilter: _propTypes.default.func.isRequired,
  setFilter: _propTypes.default.func.isRequired,
  a11yNotify: _propTypes.default.func.isRequired
});
(0, _defineProperty2.default)(FacetContainer, "defaultProps", {
  filterType: "all",
  isFilterable: false
});

var _default = (0, _.withSearch)(function (_ref3) {
  var filters = _ref3.filters,
      facets = _ref3.facets,
      addFilter = _ref3.addFilter,
      removeFilter = _ref3.removeFilter,
      setFilter = _ref3.setFilter,
      a11yNotify = _ref3.a11yNotify;
  return {
    filters: filters,
    facets: facets,
    addFilter: addFilter,
    removeFilter: removeFilter,
    setFilter: setFilter,
    a11yNotify: a11yNotify
  };
})(FacetContainer);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250YWluZXJzL0ZhY2V0LmpzIl0sIm5hbWVzIjpbIm1hcmtTZWxlY3RlZEZhY2V0VmFsdWVzRnJvbUZpbHRlcnMiLCJoZWxwZXJzIiwiRmFjZXRDb250YWluZXIiLCJzaG93IiwidG90YWxPcHRpb25zIiwic2V0U3RhdGUiLCJtb3JlIiwidmlzaWJsZU9wdGlvbnNDb3VudCIsInNob3dpbmdBbGwiLCJwcm9wcyIsImExMXlOb3RpZnkiLCJzZWFyY2hUZXJtIiwic3RhdGUiLCJhZGRGaWx0ZXIiLCJjbGFzc05hbWUiLCJmYWNldHMiLCJmaWVsZCIsImZpbHRlclR5cGUiLCJmaWx0ZXJzIiwibGFiZWwiLCJyZW1vdmVGaWx0ZXIiLCJzZXRGaWx0ZXIiLCJ2aWV3IiwiaXNGaWx0ZXJhYmxlIiwicmVzdCIsImZhY2V0c0ZvckZpZWxkIiwiZmFjZXQiLCJmYWNldFZhbHVlcyIsImRhdGEiLCJzZWxlY3RlZFZhbHVlcyIsImZpbHRlciIsImZ2Iiwic2VsZWN0ZWQiLCJtYXAiLCJ2YWx1ZSIsImxlbmd0aCIsInRyaW0iLCJvcHRpb24iLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiVmlldyIsIk11bHRpQ2hlY2tib3hGYWNldCIsIm9uTW9yZUNsaWNrIiwiaGFuZGxlQ2xpY2tNb3JlIiwiYmluZCIsIm9uUmVtb3ZlIiwib25DaGFuZ2UiLCJvblNlbGVjdCIsIm9wdGlvbnMiLCJzbGljZSIsInNob3dNb3JlIiwidmFsdWVzIiwic2hvd1NlYXJjaCIsIm9uU2VhcmNoIiwiaGFuZGxlRmFjZXRTZWFyY2giLCJzZWFyY2hQbGFjZWhvbGRlciIsIkNvbXBvbmVudCIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJGaWx0ZXJUeXBlIiwibnVtYmVyIiwiZnVuYyIsImJvb2wiLCJhcnJheU9mIiwiRmlsdGVyIiwib2JqZWN0T2YiLCJGYWNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztB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WjtBQUFBLE1BQW9CRixTQUFwQixTQUFvQkEsU0FBcEI7QUFBQSxNQUErQk8sWUFBL0IsU0FBK0JBLFlBQS9CO0FBQUEsTUFBNkNDLFNBQTdDLFNBQTZDQSxTQUE3QztBQUFBLE1BQXdEWCxVQUF4RCxTQUF3REEsVUFBeEQ7QUFBQSxTQUEwRTtBQUN4RVEsSUFBQUEsT0FBTyxFQUFQQSxPQUR3RTtBQUV4RUgsSUFBQUEsTUFBTSxFQUFOQSxNQUZ3RTtBQUd4RUYsSUFBQUEsU0FBUyxFQUFUQSxTQUh3RTtBQUl4RU8sSUFBQUEsWUFBWSxFQUFaQSxZQUp3RTtBQUt4RUMsSUFBQUEsU0FBUyxFQUFUQSxTQUx3RTtBQU14RVgsSUFBQUEsVUFBVSxFQUFWQTtBQU53RSxHQUExRTtBQUFBLENBRGEsRUFTYlIsY0FUYSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBNdWx0aUNoZWNrYm94RmFjZXQgfSBmcm9tIFwiQGVsYXN0aWMvcmVhY3Qtc2VhcmNoLXVpLXZpZXdzXCI7XG5pbXBvcnQgeyBoZWxwZXJzIH0gZnJvbSBcIkBlbGFzdGljL3NlYXJjaC11aVwiO1xuXG5pbXBvcnQgeyBGYWNldCwgRmlsdGVyLCBGaWx0ZXJUeXBlIH0gZnJvbSBcIi4uL3R5cGVzXCI7XG5pbXBvcnQgeyBhY2NlbnRGb2xkIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IHdpdGhTZWFyY2ggfSBmcm9tIFwiLi5cIjtcblxuY29uc3QgeyBtYXJrU2VsZWN0ZWRGYWNldFZhbHVlc0Zyb21GaWx0ZXJzIH0gPSBoZWxwZXJzO1xuXG5leHBvcnQgY2xhc3MgRmFjZXRDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIFByb3BzXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBmaWx0ZXJUeXBlOiBGaWx0ZXJUeXBlLFxuICAgIHNob3c6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgdmlldzogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaXNGaWx0ZXJhYmxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvLyBTdGF0ZVxuICAgIGZpbHRlcnM6IFByb3BUeXBlcy5hcnJheU9mKEZpbHRlcikuaXNSZXF1aXJlZCxcbiAgICBmYWNldHM6IFByb3BUeXBlcy5vYmplY3RPZihQcm9wVHlwZXMuYXJyYXlPZihGYWNldCkpLmlzUmVxdWlyZWQsXG4gICAgLy8gQWN0aW9uc1xuICAgIGFkZEZpbHRlcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICByZW1vdmVGaWx0ZXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0RmlsdGVyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGExMXlOb3RpZnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGZpbHRlclR5cGU6IFwiYWxsXCIsXG4gICAgaXNGaWx0ZXJhYmxlOiBmYWxzZVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHsgc2hvdyA9IDUgfSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vcmU6IHNob3csXG4gICAgICBzZWFyY2hUZXJtOiBcIlwiXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrTW9yZSA9IHRvdGFsT3B0aW9ucyA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoeyBtb3JlIH0pID0+IHtcbiAgICAgIGxldCB2aXNpYmxlT3B0aW9uc0NvdW50ID0gbW9yZSArIDEwO1xuICAgICAgY29uc3Qgc2hvd2luZ0FsbCA9IHZpc2libGVPcHRpb25zQ291bnQgPj0gdG90YWxPcHRpb25zO1xuICAgICAgaWYgKHNob3dpbmdBbGwpIHZpc2libGVPcHRpb25zQ291bnQgPSB0b3RhbE9wdGlvbnM7XG5cbiAgICAgIHRoaXMucHJvcHMuYTExeU5vdGlmeShcIm1vcmVGaWx0ZXJzXCIsIHsgdmlzaWJsZU9wdGlvbnNDb3VudCwgc2hvd2luZ0FsbCB9KTtcblxuICAgICAgcmV0dXJuIHsgbW9yZTogdmlzaWJsZU9wdGlvbnNDb3VudCB9O1xuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUZhY2V0U2VhcmNoID0gc2VhcmNoVGVybSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlYXJjaFRlcm0gfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbW9yZSwgc2VhcmNoVGVybSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICBhZGRGaWx0ZXIsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBmYWNldHMsXG4gICAgICBmaWVsZCxcbiAgICAgIGZpbHRlclR5cGUsXG4gICAgICBmaWx0ZXJzLFxuICAgICAgbGFiZWwsXG4gICAgICByZW1vdmVGaWx0ZXIsXG4gICAgICBzZXRGaWx0ZXIsXG4gICAgICB2aWV3LFxuICAgICAgaXNGaWx0ZXJhYmxlLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICBhMTF5Tm90aWZ5LFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZhY2V0c0ZvckZpZWxkID0gZmFjZXRzW2ZpZWxkXTtcblxuICAgIGlmICghZmFjZXRzRm9yRmllbGQpIHJldHVybiBudWxsO1xuXG4gICAgLy8gQnkgdXNpbmcgYFswXWAsIHdlIGFyZSBjdXJyZW50bHkgYXNzdW1pbmcgb25seSAxIGZhY2V0IHBlciBmaWVsZC4gVGhpcyB3aWxsIGxpa2VseSBiZSBlbmZvcmNlZFxuICAgIC8vIGluIGZ1dHVyZSB2ZXJzaW9uLCBzbyBpbnN0ZWFkIG9mIGFuIGFycmF5LCB0aGVyZSB3aWxsIG9ubHkgYmUgb25lIGZhY2V0IGFsbG93ZWQgcGVyIGZpZWxkLlxuICAgIGNvbnN0IGZhY2V0ID0gZmFjZXRzRm9yRmllbGRbMF07XG5cbiAgICBsZXQgZmFjZXRWYWx1ZXMgPSBtYXJrU2VsZWN0ZWRGYWNldFZhbHVlc0Zyb21GaWx0ZXJzKFxuICAgICAgZmFjZXQsXG4gICAgICBmaWx0ZXJzLFxuICAgICAgZmllbGQsXG4gICAgICBmaWx0ZXJUeXBlXG4gICAgKS5kYXRhO1xuXG4gICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZXMgPSBmYWNldFZhbHVlc1xuICAgICAgLmZpbHRlcihmdiA9PiBmdi5zZWxlY3RlZClcbiAgICAgIC5tYXAoZnYgPT4gZnYudmFsdWUpO1xuXG4gICAgaWYgKCFmYWNldFZhbHVlcy5sZW5ndGggJiYgIXNlbGVjdGVkVmFsdWVzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAoc2VhcmNoVGVybS50cmltKCkpIHtcbiAgICAgIGZhY2V0VmFsdWVzID0gZmFjZXRWYWx1ZXMuZmlsdGVyKG9wdGlvbiA9PlxuICAgICAgICBhY2NlbnRGb2xkKG9wdGlvbi52YWx1ZSlcbiAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIC5pbmNsdWRlcyhhY2NlbnRGb2xkKHNlYXJjaFRlcm0pLnRvTG93ZXJDYXNlKCkpXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IFZpZXcgPSB2aWV3IHx8IE11bHRpQ2hlY2tib3hGYWNldDtcblxuICAgIHJldHVybiBWaWV3KHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIG9uTW9yZUNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrTW9yZS5iaW5kKHRoaXMsIGZhY2V0VmFsdWVzLmxlbmd0aCksXG4gICAgICBvblJlbW92ZTogdmFsdWUgPT4ge1xuICAgICAgICByZW1vdmVGaWx0ZXIoZmllbGQsIHZhbHVlLCBmaWx0ZXJUeXBlKTtcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogdmFsdWUgPT4ge1xuICAgICAgICBzZXRGaWx0ZXIoZmllbGQsIHZhbHVlLCBmaWx0ZXJUeXBlKTtcbiAgICAgIH0sXG4gICAgICBvblNlbGVjdDogdmFsdWUgPT4ge1xuICAgICAgICBhZGRGaWx0ZXIoZmllbGQsIHZhbHVlLCBmaWx0ZXJUeXBlKTtcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiBmYWNldFZhbHVlcy5zbGljZSgwLCBtb3JlKSxcbiAgICAgIHNob3dNb3JlOiBmYWNldFZhbHVlcy5sZW5ndGggPiBtb3JlLFxuICAgICAgdmFsdWVzOiBzZWxlY3RlZFZhbHVlcyxcbiAgICAgIHNob3dTZWFyY2g6IGlzRmlsdGVyYWJsZSxcbiAgICAgIG9uU2VhcmNoOiB2YWx1ZSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlRmFjZXRTZWFyY2godmFsdWUpO1xuICAgICAgfSxcbiAgICAgIHNlYXJjaFBsYWNlaG9sZGVyOiBgRmlsdGVyICR7ZmllbGR9YCxcbiAgICAgIC4uLnJlc3RcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU2VhcmNoKFxuICAoeyBmaWx0ZXJzLCBmYWNldHMsIGFkZEZpbHRlciwgcmVtb3ZlRmlsdGVyLCBzZXRGaWx0ZXIsIGExMXlOb3RpZnkgfSkgPT4gKHtcbiAgICBmaWx0ZXJzLFxuICAgIGZhY2V0cyxcbiAgICBhZGRGaWx0ZXIsXG4gICAgcmVtb3ZlRmlsdGVyLFxuICAgIHNldEZpbHRlcixcbiAgICBhMTF5Tm90aWZ5XG4gIH0pXG4pKEZhY2V0Q29udGFpbmVyKTtcbiJdfQ==