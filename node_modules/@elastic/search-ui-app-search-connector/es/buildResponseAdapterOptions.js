import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

export default function buildResponseAdapterOptions() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var additionalFacetValueFields = Object.entries(config.facets || {}).reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        fieldName = _ref2[0],
        facetConfig = _ref2[1];

    if (facetConfig.unit && facetConfig.center) {
      return _objectSpread(_objectSpread({}, acc || {}), {}, _defineProperty({}, fieldName, _objectSpread(_objectSpread({}, facetConfig.unit && {
        unit: facetConfig.unit
      }), facetConfig.center && {
        center: facetConfig.center
      })));
    }

    return acc;
  }, null);
  return _objectSpread({}, additionalFacetValueFields && {
    additionalFacetValueFields: additionalFacetValueFields
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9idWlsZFJlc3BvbnNlQWRhcHRlck9wdGlvbnMuanMiXSwibmFtZXMiOlsiYnVpbGRSZXNwb25zZUFkYXB0ZXJPcHRpb25zIiwiY29uZmlnIiwiYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHMiLCJPYmplY3QiLCJlbnRyaWVzIiwiZmFjZXRzIiwicmVkdWNlIiwiYWNjIiwiZmllbGROYW1lIiwiZmFjZXRDb25maWciLCJ1bml0IiwiY2VudGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsZUFBZSxTQUFTQSwyQkFBVCxHQUFrRDtBQUFBLE1BQWJDLE1BQWEsdUVBQUosRUFBSTtBQUMvRCxNQUFNQywwQkFBMEIsR0FBR0MsTUFBTSxDQUFDQyxPQUFQLENBQWVILE1BQU0sQ0FBQ0ksTUFBUCxJQUFpQixFQUFoQyxFQUFvQ0MsTUFBcEMsQ0FDakMsVUFBQ0MsR0FBRCxRQUFtQztBQUFBO0FBQUEsUUFBNUJDLFNBQTRCO0FBQUEsUUFBakJDLFdBQWlCOztBQUNqQyxRQUFJQSxXQUFXLENBQUNDLElBQVosSUFBb0JELFdBQVcsQ0FBQ0UsTUFBcEMsRUFBNEM7QUFDMUMsNkNBQ01KLEdBQUcsSUFBSSxFQURiLDJCQUVHQyxTQUZILGtDQUdRQyxXQUFXLENBQUNDLElBQVosSUFBb0I7QUFBRUEsUUFBQUEsSUFBSSxFQUFFRCxXQUFXLENBQUNDO0FBQXBCLE9BSDVCLEdBSVFELFdBQVcsQ0FBQ0UsTUFBWixJQUFzQjtBQUFFQSxRQUFBQSxNQUFNLEVBQUVGLFdBQVcsQ0FBQ0U7QUFBdEIsT0FKOUI7QUFPRDs7QUFFRCxXQUFPSixHQUFQO0FBQ0QsR0FiZ0MsRUFjakMsSUFkaUMsQ0FBbkM7QUFpQkEsMkJBQ01MLDBCQUEwQixJQUFJO0FBQUVBLElBQUFBLDBCQUEwQixFQUExQkE7QUFBRixHQURwQztBQUdEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRSZXNwb25zZUFkYXB0ZXJPcHRpb25zKGNvbmZpZyA9IHt9KSB7XG4gIGNvbnN0IGFkZGl0aW9uYWxGYWNldFZhbHVlRmllbGRzID0gT2JqZWN0LmVudHJpZXMoY29uZmlnLmZhY2V0cyB8fCB7fSkucmVkdWNlKFxuICAgIChhY2MsIFtmaWVsZE5hbWUsIGZhY2V0Q29uZmlnXSkgPT4ge1xuICAgICAgaWYgKGZhY2V0Q29uZmlnLnVuaXQgJiYgZmFjZXRDb25maWcuY2VudGVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uKGFjYyB8fCB7fSksXG4gICAgICAgICAgW2ZpZWxkTmFtZV06IHtcbiAgICAgICAgICAgIC4uLihmYWNldENvbmZpZy51bml0ICYmIHsgdW5pdDogZmFjZXRDb25maWcudW5pdCB9KSxcbiAgICAgICAgICAgIC4uLihmYWNldENvbmZpZy5jZW50ZXIgJiYgeyBjZW50ZXI6IGZhY2V0Q29uZmlnLmNlbnRlciB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LFxuICAgIG51bGxcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIC4uLihhZGRpdGlvbmFsRmFjZXRWYWx1ZUZpZWxkcyAmJiB7IGFkZGl0aW9uYWxGYWNldFZhbHVlRmllbGRzIH0pXG4gIH07XG59XG4iXX0=