import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function removeName(v) {
  if (v && v.name) {
    // eslint-disable-next-line
    var name = v.name,
        rest = _objectWithoutProperties(v, ["name"]);

    return _objectSpread({}, rest);
  }

  return v;
}

function rollup(f) {
  var values = f.values.map(removeName).map(function (v) {
    return _defineProperty({}, f.field, v);
  });
  return _defineProperty({}, f.type || "any", values);
}

function adaptFilters(filters) {
  if (!filters || filters.length === 0) return {};
  var all = filters.map(rollup);
  return {
    all: all
  };
}

export function adaptRequest(request) {
  var current = request.current,
      resultsPerPage = request.resultsPerPage,
      searchTerm = request.searchTerm,
      sortDirection = request.sortDirection,
      sortField = request.sortField;
  var sort = sortField && sortDirection ? _defineProperty({}, sortField, sortDirection) : undefined;
  return _objectSpread(_objectSpread({
    query: searchTerm
  }, sort !== undefined && {
    sort: sort
  }), {}, {
    page: _objectSpread(_objectSpread({}, resultsPerPage !== undefined && {
      size: resultsPerPage
    }), current !== undefined && {
      current: current
    }),
    filters: adaptFilters(request.filters)
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0QWRhcHRlcnMuanMiXSwibmFtZXMiOlsicmVtb3ZlTmFtZSIsInYiLCJuYW1lIiwicmVzdCIsInJvbGx1cCIsImYiLCJ2YWx1ZXMiLCJtYXAiLCJmaWVsZCIsInR5cGUiLCJhZGFwdEZpbHRlcnMiLCJmaWx0ZXJzIiwibGVuZ3RoIiwiYWxsIiwiYWRhcHRSZXF1ZXN0IiwicmVxdWVzdCIsImN1cnJlbnQiLCJyZXN1bHRzUGVyUGFnZSIsInNlYXJjaFRlcm0iLCJzb3J0RGlyZWN0aW9uIiwic29ydEZpZWxkIiwic29ydCIsInVuZGVmaW5lZCIsInF1ZXJ5IiwicGFnZSIsInNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxVQUFULENBQW9CQyxDQUFwQixFQUF1QjtBQUNyQixNQUFJQSxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsSUFBWCxFQUFpQjtBQUNmO0FBRGUsUUFFUEEsSUFGTyxHQUVXRCxDQUZYLENBRVBDLElBRk87QUFBQSxRQUVFQyxJQUZGLDRCQUVXRixDQUZYOztBQUdmLDZCQUNLRSxJQURMO0FBR0Q7O0FBRUQsU0FBT0YsQ0FBUDtBQUNEOztBQUVELFNBQVNHLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLE1BQU0sR0FBR0QsQ0FBQyxDQUFDQyxNQUFGLENBQVNDLEdBQVQsQ0FBYVAsVUFBYixFQUF5Qk8sR0FBekIsQ0FBNkIsVUFBQU4sQ0FBQztBQUFBLCtCQUMxQ0ksQ0FBQyxDQUFDRyxLQUR3QyxFQUNoQ1AsQ0FEZ0M7QUFBQSxHQUE5QixDQUFmO0FBSUEsNkJBQ0dJLENBQUMsQ0FBQ0ksSUFBRixJQUFVLEtBRGIsRUFDcUJILE1BRHJCO0FBR0Q7O0FBRUQsU0FBU0ksWUFBVCxDQUFzQkMsT0FBdEIsRUFBK0I7QUFDN0IsTUFBSSxDQUFDQSxPQUFELElBQVlBLE9BQU8sQ0FBQ0MsTUFBUixLQUFtQixDQUFuQyxFQUFzQyxPQUFPLEVBQVA7QUFDdEMsTUFBTUMsR0FBRyxHQUFHRixPQUFPLENBQUNKLEdBQVIsQ0FBWUgsTUFBWixDQUFaO0FBQ0EsU0FBTztBQUNMUyxJQUFBQSxHQUFHLEVBQUhBO0FBREssR0FBUDtBQUdEOztBQUVELE9BQU8sU0FBU0MsWUFBVCxDQUFzQkMsT0FBdEIsRUFBK0I7QUFBQSxNQUVsQ0MsT0FGa0MsR0FPaENELE9BUGdDLENBRWxDQyxPQUZrQztBQUFBLE1BR2xDQyxjQUhrQyxHQU9oQ0YsT0FQZ0MsQ0FHbENFLGNBSGtDO0FBQUEsTUFJbENDLFVBSmtDLEdBT2hDSCxPQVBnQyxDQUlsQ0csVUFKa0M7QUFBQSxNQUtsQ0MsYUFMa0MsR0FPaENKLE9BUGdDLENBS2xDSSxhQUxrQztBQUFBLE1BTWxDQyxTQU5rQyxHQU9oQ0wsT0FQZ0MsQ0FNbENLLFNBTmtDO0FBU3BDLE1BQU1DLElBQUksR0FDUkQsU0FBUyxJQUFJRCxhQUFiLHVCQUVPQyxTQUZQLEVBRW1CRCxhQUZuQixJQUlJRyxTQUxOO0FBT0E7QUFDRUMsSUFBQUEsS0FBSyxFQUFFTDtBQURULEtBRU1HLElBQUksS0FBS0MsU0FBVCxJQUFzQjtBQUFFRCxJQUFBQSxJQUFJLEVBQUpBO0FBQUYsR0FGNUI7QUFHRUcsSUFBQUEsSUFBSSxrQ0FDRVAsY0FBYyxLQUFLSyxTQUFuQixJQUFnQztBQUFFRyxNQUFBQSxJQUFJLEVBQUVSO0FBQVIsS0FEbEMsR0FFRUQsT0FBTyxLQUFLTSxTQUFaLElBQXlCO0FBQUVOLE1BQUFBLE9BQU8sRUFBUEE7QUFBRixLQUYzQixDQUhOO0FBT0VMLElBQUFBLE9BQU8sRUFBRUQsWUFBWSxDQUFDSyxPQUFPLENBQUNKLE9BQVQ7QUFQdkI7QUFTRCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlbW92ZU5hbWUodikge1xuICBpZiAodiAmJiB2Lm5hbWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBjb25zdCB7IG5hbWUsIC4uLnJlc3QgfSA9IHY7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3RcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHJvbGx1cChmKSB7XG4gIGNvbnN0IHZhbHVlcyA9IGYudmFsdWVzLm1hcChyZW1vdmVOYW1lKS5tYXAodiA9PiAoe1xuICAgIFtmLmZpZWxkXTogdlxuICB9KSk7XG5cbiAgcmV0dXJuIHtcbiAgICBbZi50eXBlIHx8IFwiYW55XCJdOiB2YWx1ZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRhcHRGaWx0ZXJzKGZpbHRlcnMpIHtcbiAgaWYgKCFmaWx0ZXJzIHx8IGZpbHRlcnMubGVuZ3RoID09PSAwKSByZXR1cm4ge307XG4gIGNvbnN0IGFsbCA9IGZpbHRlcnMubWFwKHJvbGx1cCk7XG4gIHJldHVybiB7XG4gICAgYWxsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGFwdFJlcXVlc3QocmVxdWVzdCkge1xuICBjb25zdCB7XG4gICAgY3VycmVudCxcbiAgICByZXN1bHRzUGVyUGFnZSxcbiAgICBzZWFyY2hUZXJtLFxuICAgIHNvcnREaXJlY3Rpb24sXG4gICAgc29ydEZpZWxkXG4gIH0gPSByZXF1ZXN0O1xuXG4gIGNvbnN0IHNvcnQgPVxuICAgIHNvcnRGaWVsZCAmJiBzb3J0RGlyZWN0aW9uXG4gICAgICA/IHtcbiAgICAgICAgICBbc29ydEZpZWxkXTogc29ydERpcmVjdGlvblxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZDtcblxuICByZXR1cm4ge1xuICAgIHF1ZXJ5OiBzZWFyY2hUZXJtLFxuICAgIC4uLihzb3J0ICE9PSB1bmRlZmluZWQgJiYgeyBzb3J0IH0pLFxuICAgIHBhZ2U6IHtcbiAgICAgIC4uLihyZXN1bHRzUGVyUGFnZSAhPT0gdW5kZWZpbmVkICYmIHsgc2l6ZTogcmVzdWx0c1BlclBhZ2UgfSksXG4gICAgICAuLi4oY3VycmVudCAhPT0gdW5kZWZpbmVkICYmIHsgY3VycmVudCB9KVxuICAgIH0sXG4gICAgZmlsdGVyczogYWRhcHRGaWx0ZXJzKHJlcXVlc3QuZmlsdGVycylcbiAgfTtcbn1cbiJdfQ==