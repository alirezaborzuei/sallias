import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import { doFilterValuesMatch } from "../helpers";
/**
 * Filter results - Adds to current filter value
 *
 * Will trigger new search
 *
 * @param name String field name to filter on
 * @param value String field value to filter on
 * @param type String (Optional) type of filter to apply
 */

export default function addFilter(name, value) {
  var _console;

  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "all";
  // eslint-disable-next-line no-console
  if (this.debug) (_console = console).log.apply(_console, ["Search UI: Action", "addFilter"].concat(Array.prototype.slice.call(arguments)));
  var filters = this.state.filters;
  var existingFilter = filters.find(function (f) {
    return f.field === name && f.type === type;
  }) || {};
  var allOtherFilters = filters.filter(function (f) {
    return f.field !== name || f.type !== type;
  }) || [];
  var existingFilterValues = existingFilter.values || [];
  var newFilterValues = existingFilterValues.find(function (existing) {
    return doFilterValuesMatch(existing, value);
  }) ? existingFilterValues : existingFilterValues.concat(value);

  this._updateSearchResults({
    current: 1,
    filters: [].concat(_toConsumableArray(allOtherFilters), [{
      field: name,
      values: newFilterValues,
      type: type
    }])
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL2FkZEZpbHRlci5qcyJdLCJuYW1lcyI6WyJkb0ZpbHRlclZhbHVlc01hdGNoIiwiYWRkRmlsdGVyIiwibmFtZSIsInZhbHVlIiwidHlwZSIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsImFyZ3VtZW50cyIsImZpbHRlcnMiLCJzdGF0ZSIsImV4aXN0aW5nRmlsdGVyIiwiZmluZCIsImYiLCJmaWVsZCIsImFsbE90aGVyRmlsdGVycyIsImZpbHRlciIsImV4aXN0aW5nRmlsdGVyVmFsdWVzIiwidmFsdWVzIiwibmV3RmlsdGVyVmFsdWVzIiwiZXhpc3RpbmciLCJjb25jYXQiLCJfdXBkYXRlU2VhcmNoUmVzdWx0cyIsImN1cnJlbnQiXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTQSxtQkFBVCxRQUFvQyxZQUFwQztBQUVBOzs7Ozs7Ozs7O0FBU0EsZUFBZSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsS0FBekIsRUFBOEM7QUFBQTs7QUFBQSxNQUFkQyxJQUFjLHVFQUFQLEtBQU87QUFDM0Q7QUFDQSxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsWUFBQUMsT0FBTyxFQUFDQyxHQUFSLGtCQUFZLG1CQUFaLEVBQWlDLFdBQWpDLG9DQUFpREMsU0FBakQ7QUFGMkMsTUFJbkRDLE9BSm1ELEdBSXZDLEtBQUtDLEtBSmtDLENBSW5ERCxPQUptRDtBQU0zRCxNQUFNRSxjQUFjLEdBQ2xCRixPQUFPLENBQUNHLElBQVIsQ0FBYSxVQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDQyxLQUFGLEtBQVlaLElBQVosSUFBb0JXLENBQUMsQ0FBQ1QsSUFBRixLQUFXQSxJQUFuQztBQUFBLEdBQWQsS0FBMEQsRUFENUQ7QUFFQSxNQUFNVyxlQUFlLEdBQ25CTixPQUFPLENBQUNPLE1BQVIsQ0FBZSxVQUFBSCxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDQyxLQUFGLEtBQVlaLElBQVosSUFBb0JXLENBQUMsQ0FBQ1QsSUFBRixLQUFXQSxJQUFuQztBQUFBLEdBQWhCLEtBQTRELEVBRDlEO0FBRUEsTUFBTWEsb0JBQW9CLEdBQUdOLGNBQWMsQ0FBQ08sTUFBZixJQUF5QixFQUF0RDtBQUVBLE1BQU1DLGVBQWUsR0FBR0Ysb0JBQW9CLENBQUNMLElBQXJCLENBQTBCLFVBQUFRLFFBQVE7QUFBQSxXQUN4RHBCLG1CQUFtQixDQUFDb0IsUUFBRCxFQUFXakIsS0FBWCxDQURxQztBQUFBLEdBQWxDLElBR3BCYyxvQkFIb0IsR0FJcEJBLG9CQUFvQixDQUFDSSxNQUFyQixDQUE0QmxCLEtBQTVCLENBSko7O0FBTUEsT0FBS21CLG9CQUFMLENBQTBCO0FBQ3hCQyxJQUFBQSxPQUFPLEVBQUUsQ0FEZTtBQUV4QmQsSUFBQUEsT0FBTywrQkFDRk0sZUFERSxJQUVMO0FBQUVELE1BQUFBLEtBQUssRUFBRVosSUFBVDtBQUFlZ0IsTUFBQUEsTUFBTSxFQUFFQyxlQUF2QjtBQUF3Q2YsTUFBQUEsSUFBSSxFQUFKQTtBQUF4QyxLQUZLO0FBRmlCLEdBQTFCO0FBT0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkb0ZpbHRlclZhbHVlc01hdGNoIH0gZnJvbSBcIi4uL2hlbHBlcnNcIjtcblxuLyoqXG4gKiBGaWx0ZXIgcmVzdWx0cyAtIEFkZHMgdG8gY3VycmVudCBmaWx0ZXIgdmFsdWVcbiAqXG4gKiBXaWxsIHRyaWdnZXIgbmV3IHNlYXJjaFxuICpcbiAqIEBwYXJhbSBuYW1lIFN0cmluZyBmaWVsZCBuYW1lIHRvIGZpbHRlciBvblxuICogQHBhcmFtIHZhbHVlIFN0cmluZyBmaWVsZCB2YWx1ZSB0byBmaWx0ZXIgb25cbiAqIEBwYXJhbSB0eXBlIFN0cmluZyAoT3B0aW9uYWwpIHR5cGUgb2YgZmlsdGVyIHRvIGFwcGx5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZEZpbHRlcihuYW1lLCB2YWx1ZSwgdHlwZSA9IFwiYWxsXCIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgaWYgKHRoaXMuZGVidWcpIGNvbnNvbGUubG9nKFwiU2VhcmNoIFVJOiBBY3Rpb25cIiwgXCJhZGRGaWx0ZXJcIiwgLi4uYXJndW1lbnRzKTtcblxuICBjb25zdCB7IGZpbHRlcnMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgY29uc3QgZXhpc3RpbmdGaWx0ZXIgPVxuICAgIGZpbHRlcnMuZmluZChmID0+IGYuZmllbGQgPT09IG5hbWUgJiYgZi50eXBlID09PSB0eXBlKSB8fCB7fTtcbiAgY29uc3QgYWxsT3RoZXJGaWx0ZXJzID1cbiAgICBmaWx0ZXJzLmZpbHRlcihmID0+IGYuZmllbGQgIT09IG5hbWUgfHwgZi50eXBlICE9PSB0eXBlKSB8fCBbXTtcbiAgY29uc3QgZXhpc3RpbmdGaWx0ZXJWYWx1ZXMgPSBleGlzdGluZ0ZpbHRlci52YWx1ZXMgfHwgW107XG5cbiAgY29uc3QgbmV3RmlsdGVyVmFsdWVzID0gZXhpc3RpbmdGaWx0ZXJWYWx1ZXMuZmluZChleGlzdGluZyA9PlxuICAgIGRvRmlsdGVyVmFsdWVzTWF0Y2goZXhpc3RpbmcsIHZhbHVlKVxuICApXG4gICAgPyBleGlzdGluZ0ZpbHRlclZhbHVlc1xuICAgIDogZXhpc3RpbmdGaWx0ZXJWYWx1ZXMuY29uY2F0KHZhbHVlKTtcblxuICB0aGlzLl91cGRhdGVTZWFyY2hSZXN1bHRzKHtcbiAgICBjdXJyZW50OiAxLFxuICAgIGZpbHRlcnM6IFtcbiAgICAgIC4uLmFsbE90aGVyRmlsdGVycyxcbiAgICAgIHsgZmllbGQ6IG5hbWUsIHZhbHVlczogbmV3RmlsdGVyVmFsdWVzLCB0eXBlIH1cbiAgICBdXG4gIH0pO1xufVxuIl19