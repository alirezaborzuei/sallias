import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Set the current search term
 *
 * Will trigger new search
 *
 * @param searchTerm String
 * @param options Object Additional objects
 * @param autocompleteMinimumCharacters Number Only trigger autocomplete if
 * searchTerm has at least this number of characters
 * @param options.autocompleteResults Boolean Fetch autocomplete
 * results?
 * @param options.refresh Boolean Refresh search results?
 * @param options.debounce Length to debounce API calls
 */
export default function setSearchTerm(searchTerm) {
  var _console;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$autocompleteMini = _ref.autocompleteMinimumCharacters,
      autocompleteMinimumCharacters = _ref$autocompleteMini === void 0 ? 0 : _ref$autocompleteMini,
      _ref$autocompleteResu = _ref.autocompleteResults,
      autocompleteResults = _ref$autocompleteResu === void 0 ? false : _ref$autocompleteResu,
      _ref$autocompleteSugg = _ref.autocompleteSuggestions,
      autocompleteSuggestions = _ref$autocompleteSugg === void 0 ? false : _ref$autocompleteSugg,
      _ref$shouldClearFilte = _ref.shouldClearFilters,
      shouldClearFilters = _ref$shouldClearFilte === void 0 ? true : _ref$shouldClearFilte,
      _ref$refresh = _ref.refresh,
      refresh = _ref$refresh === void 0 ? true : _ref$refresh,
      _ref$debounce = _ref.debounce,
      debounce = _ref$debounce === void 0 ? 0 : _ref$debounce;

  if (this.debug) // eslint-disable-next-line no-console
    (_console = console).log.apply(_console, ["Search UI: Action", "setSearchTerm"].concat(Array.prototype.slice.call(arguments)));

  this._setState({
    searchTerm: searchTerm
  });

  if (refresh) {
    this.debounceManager.runWithDebounce(debounce, "_updateSearchResults", this._updateSearchResults, _objectSpread({
      current: 1
    }, shouldClearFilters && {
      filters: []
    }));
  }

  if ((autocompleteResults || autocompleteSuggestions) && searchTerm.length >= autocompleteMinimumCharacters) {
    this.debounceManager.runWithDebounce(debounce, "_updateAutocomplete", this._updateAutocomplete, searchTerm, {
      autocompleteResults: autocompleteResults,
      autocompleteSuggestions: autocompleteSuggestions
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL3NldFNlYXJjaFRlcm0uanMiXSwibmFtZXMiOlsic2V0U2VhcmNoVGVybSIsInNlYXJjaFRlcm0iLCJhdXRvY29tcGxldGVNaW5pbXVtQ2hhcmFjdGVycyIsImF1dG9jb21wbGV0ZVJlc3VsdHMiLCJhdXRvY29tcGxldGVTdWdnZXN0aW9ucyIsInNob3VsZENsZWFyRmlsdGVycyIsInJlZnJlc2giLCJkZWJvdW5jZSIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsImFyZ3VtZW50cyIsIl9zZXRTdGF0ZSIsImRlYm91bmNlTWFuYWdlciIsInJ1bldpdGhEZWJvdW5jZSIsIl91cGRhdGVTZWFyY2hSZXN1bHRzIiwiY3VycmVudCIsImZpbHRlcnMiLCJsZW5ndGgiLCJfdXBkYXRlQXV0b2NvbXBsZXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxlQUFlLFNBQVNBLGFBQVQsQ0FDYkMsVUFEYSxFQVViO0FBQUE7O0FBQUEsaUZBREksRUFDSjtBQUFBLG1DQVBFQyw2QkFPRjtBQUFBLE1BUEVBLDZCQU9GLHNDQVBrQyxDQU9sQztBQUFBLG1DQU5FQyxtQkFNRjtBQUFBLE1BTkVBLG1CQU1GLHNDQU53QixLQU14QjtBQUFBLG1DQUxFQyx1QkFLRjtBQUFBLE1BTEVBLHVCQUtGLHNDQUw0QixLQUs1QjtBQUFBLG1DQUpFQyxrQkFJRjtBQUFBLE1BSkVBLGtCQUlGLHNDQUp1QixJQUl2QjtBQUFBLDBCQUhFQyxPQUdGO0FBQUEsTUFIRUEsT0FHRiw2QkFIWSxJQUdaO0FBQUEsMkJBRkVDLFFBRUY7QUFBQSxNQUZFQSxRQUVGLDhCQUZhLENBRWI7O0FBQ0EsTUFBSSxLQUFLQyxLQUFULEVBQ0U7QUFDQSxnQkFBQUMsT0FBTyxFQUFDQyxHQUFSLGtCQUFZLG1CQUFaLEVBQWlDLGVBQWpDLG9DQUFxREMsU0FBckQ7O0FBRUYsT0FBS0MsU0FBTCxDQUFlO0FBQUVYLElBQUFBLFVBQVUsRUFBVkE7QUFBRixHQUFmOztBQUVBLE1BQUlLLE9BQUosRUFBYTtBQUNYLFNBQUtPLGVBQUwsQ0FBcUJDLGVBQXJCLENBQ0VQLFFBREYsRUFFRSxzQkFGRixFQUdFLEtBQUtRLG9CQUhQO0FBS0lDLE1BQUFBLE9BQU8sRUFBRTtBQUxiLE9BTVFYLGtCQUFrQixJQUFJO0FBQUVZLE1BQUFBLE9BQU8sRUFBRTtBQUFYLEtBTjlCO0FBU0Q7O0FBRUQsTUFDRSxDQUFDZCxtQkFBbUIsSUFBSUMsdUJBQXhCLEtBQ0FILFVBQVUsQ0FBQ2lCLE1BQVgsSUFBcUJoQiw2QkFGdkIsRUFHRTtBQUNBLFNBQUtXLGVBQUwsQ0FBcUJDLGVBQXJCLENBQ0VQLFFBREYsRUFFRSxxQkFGRixFQUdFLEtBQUtZLG1CQUhQLEVBSUVsQixVQUpGLEVBS0U7QUFDRUUsTUFBQUEsbUJBQW1CLEVBQW5CQSxtQkFERjtBQUVFQyxNQUFBQSx1QkFBdUIsRUFBdkJBO0FBRkYsS0FMRjtBQVVEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNldCB0aGUgY3VycmVudCBzZWFyY2ggdGVybVxuICpcbiAqIFdpbGwgdHJpZ2dlciBuZXcgc2VhcmNoXG4gKlxuICogQHBhcmFtIHNlYXJjaFRlcm0gU3RyaW5nXG4gKiBAcGFyYW0gb3B0aW9ucyBPYmplY3QgQWRkaXRpb25hbCBvYmplY3RzXG4gKiBAcGFyYW0gYXV0b2NvbXBsZXRlTWluaW11bUNoYXJhY3RlcnMgTnVtYmVyIE9ubHkgdHJpZ2dlciBhdXRvY29tcGxldGUgaWZcbiAqIHNlYXJjaFRlcm0gaGFzIGF0IGxlYXN0IHRoaXMgbnVtYmVyIG9mIGNoYXJhY3RlcnNcbiAqIEBwYXJhbSBvcHRpb25zLmF1dG9jb21wbGV0ZVJlc3VsdHMgQm9vbGVhbiBGZXRjaCBhdXRvY29tcGxldGVcbiAqIHJlc3VsdHM/XG4gKiBAcGFyYW0gb3B0aW9ucy5yZWZyZXNoIEJvb2xlYW4gUmVmcmVzaCBzZWFyY2ggcmVzdWx0cz9cbiAqIEBwYXJhbSBvcHRpb25zLmRlYm91bmNlIExlbmd0aCB0byBkZWJvdW5jZSBBUEkgY2FsbHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0U2VhcmNoVGVybShcbiAgc2VhcmNoVGVybSxcbiAge1xuICAgIGF1dG9jb21wbGV0ZU1pbmltdW1DaGFyYWN0ZXJzID0gMCxcbiAgICBhdXRvY29tcGxldGVSZXN1bHRzID0gZmFsc2UsXG4gICAgYXV0b2NvbXBsZXRlU3VnZ2VzdGlvbnMgPSBmYWxzZSxcbiAgICBzaG91bGRDbGVhckZpbHRlcnMgPSB0cnVlLFxuICAgIHJlZnJlc2ggPSB0cnVlLFxuICAgIGRlYm91bmNlID0gMFxuICB9ID0ge31cbikge1xuICBpZiAodGhpcy5kZWJ1ZylcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKFwiU2VhcmNoIFVJOiBBY3Rpb25cIiwgXCJzZXRTZWFyY2hUZXJtXCIsIC4uLmFyZ3VtZW50cyk7XG5cbiAgdGhpcy5fc2V0U3RhdGUoeyBzZWFyY2hUZXJtIH0pO1xuXG4gIGlmIChyZWZyZXNoKSB7XG4gICAgdGhpcy5kZWJvdW5jZU1hbmFnZXIucnVuV2l0aERlYm91bmNlKFxuICAgICAgZGVib3VuY2UsXG4gICAgICBcIl91cGRhdGVTZWFyY2hSZXN1bHRzXCIsXG4gICAgICB0aGlzLl91cGRhdGVTZWFyY2hSZXN1bHRzLFxuICAgICAge1xuICAgICAgICBjdXJyZW50OiAxLFxuICAgICAgICAuLi4oc2hvdWxkQ2xlYXJGaWx0ZXJzICYmIHsgZmlsdGVyczogW10gfSlcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgaWYgKFxuICAgIChhdXRvY29tcGxldGVSZXN1bHRzIHx8IGF1dG9jb21wbGV0ZVN1Z2dlc3Rpb25zKSAmJlxuICAgIHNlYXJjaFRlcm0ubGVuZ3RoID49IGF1dG9jb21wbGV0ZU1pbmltdW1DaGFyYWN0ZXJzXG4gICkge1xuICAgIHRoaXMuZGVib3VuY2VNYW5hZ2VyLnJ1bldpdGhEZWJvdW5jZShcbiAgICAgIGRlYm91bmNlLFxuICAgICAgXCJfdXBkYXRlQXV0b2NvbXBsZXRlXCIsXG4gICAgICB0aGlzLl91cGRhdGVBdXRvY29tcGxldGUsXG4gICAgICBzZWFyY2hUZXJtLFxuICAgICAge1xuICAgICAgICBhdXRvY29tcGxldGVSZXN1bHRzLFxuICAgICAgICBhdXRvY29tcGxldGVTdWdnZXN0aW9uc1xuICAgICAgfVxuICAgICk7XG4gIH1cbn1cbiJdfQ==