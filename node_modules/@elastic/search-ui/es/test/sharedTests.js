import { doesStateHaveResponseData } from "../test/helpers";
export function itResetsCurrent(fn) {
  var state = fn();
  it("resets current", function () {
    expect(state.current).toEqual(1);
  });
}
export function itResetsFilters(fn) {
  var state = fn();
  it("resets filters", function () {
    expect(state.filters).toEqual([]);
  });
}
export function itFetchesResults(fn) {
  it("fetches results", function () {
    var state = fn();
    expect(doesStateHaveResponseData(state)).toBe(true);
  });
}
export function itUpdatesURLState(MockedURLManager, fn) {
  it("Updates URL state", function () {
    fn();
    expect(MockedURLManager.mock.instances[0].pushStateToURL.mock.calls).toHaveLength(1);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L3NoYXJlZFRlc3RzLmpzIl0sIm5hbWVzIjpbImRvZXNTdGF0ZUhhdmVSZXNwb25zZURhdGEiLCJpdFJlc2V0c0N1cnJlbnQiLCJmbiIsInN0YXRlIiwiaXQiLCJleHBlY3QiLCJjdXJyZW50IiwidG9FcXVhbCIsIml0UmVzZXRzRmlsdGVycyIsImZpbHRlcnMiLCJpdEZldGNoZXNSZXN1bHRzIiwidG9CZSIsIml0VXBkYXRlc1VSTFN0YXRlIiwiTW9ja2VkVVJMTWFuYWdlciIsIm1vY2siLCJpbnN0YW5jZXMiLCJwdXNoU3RhdGVUb1VSTCIsImNhbGxzIiwidG9IYXZlTGVuZ3RoIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSx5QkFBVCxRQUEwQyxpQkFBMUM7QUFFQSxPQUFPLFNBQVNDLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQ2xDLE1BQU1DLEtBQUssR0FBR0QsRUFBRSxFQUFoQjtBQUNBRSxFQUFBQSxFQUFFLENBQUMsZ0JBQUQsRUFBbUIsWUFBTTtBQUN6QkMsSUFBQUEsTUFBTSxDQUFDRixLQUFLLENBQUNHLE9BQVAsQ0FBTixDQUFzQkMsT0FBdEIsQ0FBOEIsQ0FBOUI7QUFDRCxHQUZDLENBQUY7QUFHRDtBQUVELE9BQU8sU0FBU0MsZUFBVCxDQUF5Qk4sRUFBekIsRUFBNkI7QUFDbEMsTUFBTUMsS0FBSyxHQUFHRCxFQUFFLEVBQWhCO0FBQ0FFLEVBQUFBLEVBQUUsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQ3pCQyxJQUFBQSxNQUFNLENBQUNGLEtBQUssQ0FBQ00sT0FBUCxDQUFOLENBQXNCRixPQUF0QixDQUE4QixFQUE5QjtBQUNELEdBRkMsQ0FBRjtBQUdEO0FBRUQsT0FBTyxTQUFTRyxnQkFBVCxDQUEwQlIsRUFBMUIsRUFBOEI7QUFDbkNFLEVBQUFBLEVBQUUsQ0FBQyxpQkFBRCxFQUFvQixZQUFNO0FBQzFCLFFBQU1ELEtBQUssR0FBR0QsRUFBRSxFQUFoQjtBQUNBRyxJQUFBQSxNQUFNLENBQUNMLHlCQUF5QixDQUFDRyxLQUFELENBQTFCLENBQU4sQ0FBeUNRLElBQXpDLENBQThDLElBQTlDO0FBQ0QsR0FIQyxDQUFGO0FBSUQ7QUFFRCxPQUFPLFNBQVNDLGlCQUFULENBQTJCQyxnQkFBM0IsRUFBNkNYLEVBQTdDLEVBQWlEO0FBQ3RERSxFQUFBQSxFQUFFLENBQUMsbUJBQUQsRUFBc0IsWUFBTTtBQUM1QkYsSUFBQUEsRUFBRTtBQUNGRyxJQUFBQSxNQUFNLENBQ0pRLGdCQUFnQixDQUFDQyxJQUFqQixDQUFzQkMsU0FBdEIsQ0FBZ0MsQ0FBaEMsRUFBbUNDLGNBQW5DLENBQWtERixJQUFsRCxDQUF1REcsS0FEbkQsQ0FBTixDQUVFQyxZQUZGLENBRWUsQ0FGZjtBQUdELEdBTEMsQ0FBRjtBQU1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZG9lc1N0YXRlSGF2ZVJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi90ZXN0L2hlbHBlcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGl0UmVzZXRzQ3VycmVudChmbikge1xuICBjb25zdCBzdGF0ZSA9IGZuKCk7XG4gIGl0KFwicmVzZXRzIGN1cnJlbnRcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChzdGF0ZS5jdXJyZW50KS50b0VxdWFsKDEpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGl0UmVzZXRzRmlsdGVycyhmbikge1xuICBjb25zdCBzdGF0ZSA9IGZuKCk7XG4gIGl0KFwicmVzZXRzIGZpbHRlcnNcIiwgKCkgPT4ge1xuICAgIGV4cGVjdChzdGF0ZS5maWx0ZXJzKS50b0VxdWFsKFtdKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpdEZldGNoZXNSZXN1bHRzKGZuKSB7XG4gIGl0KFwiZmV0Y2hlcyByZXN1bHRzXCIsICgpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IGZuKCk7XG4gICAgZXhwZWN0KGRvZXNTdGF0ZUhhdmVSZXNwb25zZURhdGEoc3RhdGUpKS50b0JlKHRydWUpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGl0VXBkYXRlc1VSTFN0YXRlKE1vY2tlZFVSTE1hbmFnZXIsIGZuKSB7XG4gIGl0KFwiVXBkYXRlcyBVUkwgc3RhdGVcIiwgKCkgPT4ge1xuICAgIGZuKCk7XG4gICAgZXhwZWN0KFxuICAgICAgTW9ja2VkVVJMTWFuYWdlci5tb2NrLmluc3RhbmNlc1swXS5wdXNoU3RhdGVUb1VSTC5tb2NrLmNhbGxzXG4gICAgKS50b0hhdmVMZW5ndGgoMSk7XG4gIH0pO1xufVxuIl19