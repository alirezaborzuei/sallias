"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

/**
 * minimal debounce function
 *
 * mostly for not spamming the server with requests when
 * searching with type ahead
 */
function debounce(func, wait) {
  var timeout;

  var debouncedFn = function debouncedFn() {
    var args = arguments;

    var later = function later() {
      func.apply(null, args);
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };

  debouncedFn.cancel = function () {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };

  return debouncedFn;
}

var DebounceManager = /*#__PURE__*/function () {
  function DebounceManager() {
    (0, _classCallCheck2.default)(this, DebounceManager);
    (0, _defineProperty2.default)(this, "debounceCache", {});
  }

  (0, _createClass2.default)(DebounceManager, [{
    key: "runWithDebounce",

    /**
     * Dynamically debounce and cache a debounced version of a function at the time of calling that function. This avoids
     * managing debounced version of functions locally.
     *
     * In other words, debounce usually works by debouncing based on
     * referential identity of a function. This works by comparing provided function names.
     *
     * This also has the ability to short-circuit a debounce all-together, if no wait
     * time is provided.
     *
     * Assumption:
     * Functions are debounced on a combination of unique function name and wait times. So debouncing won't work on
     * subsequent calls with different wait times or different functions. That also means that the debounce manager
     * can be used for different functions in parallel, and keep the two functions debounced separately.
     *
     * @param {number} wait Milliseconds to debounce. Executes immediately if falsey.
     * @param {function} fn Function to debounce
     * @param {function} functionName Name of function to debounce, used to create a unique key
     * @param {...any} parameters Parameters to pass to function
     */
    value: function runWithDebounce(wait, functionName, fn) {
      for (var _len = arguments.length, parameters = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        parameters[_key - 3] = arguments[_key];
      }

      if (!wait) {
        return fn.apply(void 0, parameters);
      }

      var key = "".concat(functionName, "|").concat(wait.toString());
      var debounced = this.debounceCache[key];

      if (!debounced) {
        this.debounceCache[key] = debounce(fn, wait);
        debounced = this.debounceCache[key];
      }

      debounced.apply(void 0, parameters);
    }
    /**
     * Cancels existing debounced function calls.
     *
     * This will cancel any debounced function call, regardless of the debounce length that was provided.
     *
     * For example, making the following series of calls will create multiple debounced functions, because
     * they are cached by a combination of unique name and debounce length.
     *
     * runWithDebounce(1000, "_updateSearchResults", this._updateSearchResults)
     * runWithDebounce(500, "_updateSearchResults", this._updateSearchResults)
     * runWithDebounce(1000, "_updateSearchResults", this._updateSearchResults)
     *
     * Calling the following will cancel all of those, if they have not yet executed:
     *
     * cancelByName("_updateSearchResults")
     *
     * @param {string} functionName The name of the function that was debounced. This needs to match exactly what was provided
     * when runWithDebounce was called originally.
     */

  }, {
    key: "cancelByName",
    value: function cancelByName(functionName) {
      Object.entries(this.debounceCache).filter(function (_ref) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 1),
            cachedKey = _ref2[0];

        return cachedKey.startsWith("".concat(functionName, "|"));
      }) // eslint-disable-next-line no-unused-vars
      .forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
            _ = _ref4[0],
            cachedValue = _ref4[1];

        return cachedValue.cancel();
      });
    }
  }]);
  return DebounceManager;
}();
/**
 * Perform a standard debounce
 *
 * @param {number} wait Milliseconds to debounce. Executes immediately if falsey.
 * @param {function} fn Function to debounce
 */


DebounceManager.debounce = function (wait, fn) {
  return debounce(fn, wait);
};

var _default = DebounceManager;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZWJvdW5jZU1hbmFnZXIuanMiXSwibmFtZXMiOlsiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsInRpbWVvdXQiLCJkZWJvdW5jZWRGbiIsImFyZ3MiLCJhcmd1bWVudHMiLCJsYXRlciIsImFwcGx5IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNhbmNlbCIsIkRlYm91bmNlTWFuYWdlciIsImZ1bmN0aW9uTmFtZSIsImZuIiwicGFyYW1ldGVycyIsImtleSIsInRvU3RyaW5nIiwiZGVib3VuY2VkIiwiZGVib3VuY2VDYWNoZSIsIk9iamVjdCIsImVudHJpZXMiLCJmaWx0ZXIiLCJjYWNoZWRLZXkiLCJzdGFydHNXaXRoIiwiZm9yRWFjaCIsIl8iLCJjYWNoZWRWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7O0FBTUEsU0FBU0EsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCO0FBQzVCLE1BQUlDLE9BQUo7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsR0FBVztBQUM3QixRQUFNQyxJQUFJLEdBQUdDLFNBQWI7O0FBQ0EsUUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBTTtBQUNsQk4sTUFBQUEsSUFBSSxDQUFDTyxLQUFMLENBQVcsSUFBWCxFQUFpQkgsSUFBakI7QUFDRCxLQUZEOztBQUdBSSxJQUFBQSxZQUFZLENBQUNOLE9BQUQsQ0FBWjtBQUNBQSxJQUFBQSxPQUFPLEdBQUdPLFVBQVUsQ0FBQ0gsS0FBRCxFQUFRTCxJQUFSLENBQXBCO0FBQ0QsR0FQRDs7QUFRQUUsRUFBQUEsV0FBVyxDQUFDTyxNQUFaLEdBQXFCLFlBQU07QUFDekIsUUFBSVIsT0FBSixFQUFhO0FBQ1hNLE1BQUFBLFlBQVksQ0FBQ04sT0FBRCxDQUFaO0FBQ0FBLE1BQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0Q7QUFDRixHQUxEOztBQU1BLFNBQU9DLFdBQVA7QUFDRDs7SUFFS1EsZTs7O3lEQUNZLEU7Ozs7OztBQUVoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBb0JnQlYsSSxFQUFNVyxZLEVBQWNDLEUsRUFBbUI7QUFBQSx3Q0FBWkMsVUFBWTtBQUFaQSxRQUFBQSxVQUFZO0FBQUE7O0FBQ3JELFVBQUksQ0FBQ2IsSUFBTCxFQUFXO0FBQ1QsZUFBT1ksRUFBRSxNQUFGLFNBQU1DLFVBQU4sQ0FBUDtBQUNEOztBQUVELFVBQU1DLEdBQUcsYUFBTUgsWUFBTixjQUFzQlgsSUFBSSxDQUFDZSxRQUFMLEVBQXRCLENBQVQ7QUFDQSxVQUFJQyxTQUFTLEdBQUcsS0FBS0MsYUFBTCxDQUFtQkgsR0FBbkIsQ0FBaEI7O0FBQ0EsVUFBSSxDQUFDRSxTQUFMLEVBQWdCO0FBQ2QsYUFBS0MsYUFBTCxDQUFtQkgsR0FBbkIsSUFBMEJoQixRQUFRLENBQUNjLEVBQUQsRUFBS1osSUFBTCxDQUFsQztBQUNBZ0IsUUFBQUEsU0FBUyxHQUFHLEtBQUtDLGFBQUwsQ0FBbUJILEdBQW5CLENBQVo7QUFDRDs7QUFDREUsTUFBQUEsU0FBUyxNQUFULFNBQWFILFVBQWI7QUFDRDtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lDQW1CYUYsWSxFQUFjO0FBQ3pCTyxNQUFBQSxNQUFNLENBQUNDLE9BQVAsQ0FBZSxLQUFLRixhQUFwQixFQUNHRyxNQURILENBQ1U7QUFBQTtBQUFBLFlBQUVDLFNBQUY7O0FBQUEsZUFBaUJBLFNBQVMsQ0FBQ0MsVUFBVixXQUF3QlgsWUFBeEIsT0FBakI7QUFBQSxPQURWLEVBRUU7QUFGRixPQUdHWSxPQUhILENBR1c7QUFBQTtBQUFBLFlBQUVDLENBQUY7QUFBQSxZQUFLQyxXQUFMOztBQUFBLGVBQXNCQSxXQUFXLENBQUNoQixNQUFaLEVBQXRCO0FBQUEsT0FIWDtBQUlEOzs7O0FBRUg7Ozs7Ozs7O0FBTUFDLGVBQWUsQ0FBQ1osUUFBaEIsR0FBMkIsVUFBQ0UsSUFBRCxFQUFPWSxFQUFQLEVBQWM7QUFDdkMsU0FBT2QsUUFBUSxDQUFDYyxFQUFELEVBQUtaLElBQUwsQ0FBZjtBQUNELENBRkQ7O2VBSWVVLGUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIG1pbmltYWwgZGVib3VuY2UgZnVuY3Rpb25cbiAqXG4gKiBtb3N0bHkgZm9yIG5vdCBzcGFtbWluZyB0aGUgc2VydmVyIHdpdGggcmVxdWVzdHMgd2hlblxuICogc2VhcmNoaW5nIHdpdGggdHlwZSBhaGVhZFxuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0KSB7XG4gIGxldCB0aW1lb3V0O1xuICBjb25zdCBkZWJvdW5jZWRGbiA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICBmdW5jLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH07XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfTtcbiAgZGVib3VuY2VkRm4uY2FuY2VsID0gKCkgPT4ge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBkZWJvdW5jZWRGbjtcbn1cblxuY2xhc3MgRGVib3VuY2VNYW5hZ2VyIHtcbiAgZGVib3VuY2VDYWNoZSA9IHt9O1xuXG4gIC8qKlxuICAgKiBEeW5hbWljYWxseSBkZWJvdW5jZSBhbmQgY2FjaGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIGZ1bmN0aW9uIGF0IHRoZSB0aW1lIG9mIGNhbGxpbmcgdGhhdCBmdW5jdGlvbi4gVGhpcyBhdm9pZHNcbiAgICogbWFuYWdpbmcgZGVib3VuY2VkIHZlcnNpb24gb2YgZnVuY3Rpb25zIGxvY2FsbHkuXG4gICAqXG4gICAqIEluIG90aGVyIHdvcmRzLCBkZWJvdW5jZSB1c3VhbGx5IHdvcmtzIGJ5IGRlYm91bmNpbmcgYmFzZWQgb25cbiAgICogcmVmZXJlbnRpYWwgaWRlbnRpdHkgb2YgYSBmdW5jdGlvbi4gVGhpcyB3b3JrcyBieSBjb21wYXJpbmcgcHJvdmlkZWQgZnVuY3Rpb24gbmFtZXMuXG4gICAqXG4gICAqIFRoaXMgYWxzbyBoYXMgdGhlIGFiaWxpdHkgdG8gc2hvcnQtY2lyY3VpdCBhIGRlYm91bmNlIGFsbC10b2dldGhlciwgaWYgbm8gd2FpdFxuICAgKiB0aW1lIGlzIHByb3ZpZGVkLlxuICAgKlxuICAgKiBBc3N1bXB0aW9uOlxuICAgKiBGdW5jdGlvbnMgYXJlIGRlYm91bmNlZCBvbiBhIGNvbWJpbmF0aW9uIG9mIHVuaXF1ZSBmdW5jdGlvbiBuYW1lIGFuZCB3YWl0IHRpbWVzLiBTbyBkZWJvdW5jaW5nIHdvbid0IHdvcmsgb25cbiAgICogc3Vic2VxdWVudCBjYWxscyB3aXRoIGRpZmZlcmVudCB3YWl0IHRpbWVzIG9yIGRpZmZlcmVudCBmdW5jdGlvbnMuIFRoYXQgYWxzbyBtZWFucyB0aGF0IHRoZSBkZWJvdW5jZSBtYW5hZ2VyXG4gICAqIGNhbiBiZSB1c2VkIGZvciBkaWZmZXJlbnQgZnVuY3Rpb25zIGluIHBhcmFsbGVsLCBhbmQga2VlcCB0aGUgdHdvIGZ1bmN0aW9ucyBkZWJvdW5jZWQgc2VwYXJhdGVseS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgTWlsbGlzZWNvbmRzIHRvIGRlYm91bmNlLiBFeGVjdXRlcyBpbW1lZGlhdGVseSBpZiBmYWxzZXkuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGRlYm91bmNlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9uTmFtZSBOYW1lIG9mIGZ1bmN0aW9uIHRvIGRlYm91bmNlLCB1c2VkIHRvIGNyZWF0ZSBhIHVuaXF1ZSBrZXlcbiAgICogQHBhcmFtIHsuLi5hbnl9IHBhcmFtZXRlcnMgUGFyYW1ldGVycyB0byBwYXNzIHRvIGZ1bmN0aW9uXG4gICAqL1xuICBydW5XaXRoRGVib3VuY2Uod2FpdCwgZnVuY3Rpb25OYW1lLCBmbiwgLi4ucGFyYW1ldGVycykge1xuICAgIGlmICghd2FpdCkge1xuICAgICAgcmV0dXJuIGZuKC4uLnBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGAke2Z1bmN0aW9uTmFtZX18JHt3YWl0LnRvU3RyaW5nKCl9YDtcbiAgICBsZXQgZGVib3VuY2VkID0gdGhpcy5kZWJvdW5jZUNhY2hlW2tleV07XG4gICAgaWYgKCFkZWJvdW5jZWQpIHtcbiAgICAgIHRoaXMuZGVib3VuY2VDYWNoZVtrZXldID0gZGVib3VuY2UoZm4sIHdhaXQpO1xuICAgICAgZGVib3VuY2VkID0gdGhpcy5kZWJvdW5jZUNhY2hlW2tleV07XG4gICAgfVxuICAgIGRlYm91bmNlZCguLi5wYXJhbWV0ZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGV4aXN0aW5nIGRlYm91bmNlZCBmdW5jdGlvbiBjYWxscy5cbiAgICpcbiAgICogVGhpcyB3aWxsIGNhbmNlbCBhbnkgZGVib3VuY2VkIGZ1bmN0aW9uIGNhbGwsIHJlZ2FyZGxlc3Mgb2YgdGhlIGRlYm91bmNlIGxlbmd0aCB0aGF0IHdhcyBwcm92aWRlZC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIG1ha2luZyB0aGUgZm9sbG93aW5nIHNlcmllcyBvZiBjYWxscyB3aWxsIGNyZWF0ZSBtdWx0aXBsZSBkZWJvdW5jZWQgZnVuY3Rpb25zLCBiZWNhdXNlXG4gICAqIHRoZXkgYXJlIGNhY2hlZCBieSBhIGNvbWJpbmF0aW9uIG9mIHVuaXF1ZSBuYW1lIGFuZCBkZWJvdW5jZSBsZW5ndGguXG4gICAqXG4gICAqIHJ1bldpdGhEZWJvdW5jZSgxMDAwLCBcIl91cGRhdGVTZWFyY2hSZXN1bHRzXCIsIHRoaXMuX3VwZGF0ZVNlYXJjaFJlc3VsdHMpXG4gICAqIHJ1bldpdGhEZWJvdW5jZSg1MDAsIFwiX3VwZGF0ZVNlYXJjaFJlc3VsdHNcIiwgdGhpcy5fdXBkYXRlU2VhcmNoUmVzdWx0cylcbiAgICogcnVuV2l0aERlYm91bmNlKDEwMDAsIFwiX3VwZGF0ZVNlYXJjaFJlc3VsdHNcIiwgdGhpcy5fdXBkYXRlU2VhcmNoUmVzdWx0cylcbiAgICpcbiAgICogQ2FsbGluZyB0aGUgZm9sbG93aW5nIHdpbGwgY2FuY2VsIGFsbCBvZiB0aG9zZSwgaWYgdGhleSBoYXZlIG5vdCB5ZXQgZXhlY3V0ZWQ6XG4gICAqXG4gICAqIGNhbmNlbEJ5TmFtZShcIl91cGRhdGVTZWFyY2hSZXN1bHRzXCIpXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jdGlvbk5hbWUgVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRoYXQgd2FzIGRlYm91bmNlZC4gVGhpcyBuZWVkcyB0byBtYXRjaCBleGFjdGx5IHdoYXQgd2FzIHByb3ZpZGVkXG4gICAqIHdoZW4gcnVuV2l0aERlYm91bmNlIHdhcyBjYWxsZWQgb3JpZ2luYWxseS5cbiAgICovXG4gIGNhbmNlbEJ5TmFtZShmdW5jdGlvbk5hbWUpIHtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLmRlYm91bmNlQ2FjaGUpXG4gICAgICAuZmlsdGVyKChbY2FjaGVkS2V5XSkgPT4gY2FjaGVkS2V5LnN0YXJ0c1dpdGgoYCR7ZnVuY3Rpb25OYW1lfXxgKSlcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgLmZvckVhY2goKFtfLCBjYWNoZWRWYWx1ZV0pID0+IGNhY2hlZFZhbHVlLmNhbmNlbCgpKTtcbiAgfVxufVxuLyoqXG4gKiBQZXJmb3JtIGEgc3RhbmRhcmQgZGVib3VuY2VcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd2FpdCBNaWxsaXNlY29uZHMgdG8gZGVib3VuY2UuIEV4ZWN1dGVzIGltbWVkaWF0ZWx5IGlmIGZhbHNleS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGRlYm91bmNlXG4gKi9cbkRlYm91bmNlTWFuYWdlci5kZWJvdW5jZSA9ICh3YWl0LCBmbikgPT4ge1xuICByZXR1cm4gZGVib3VuY2UoZm4sIHdhaXQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVib3VuY2VNYW5hZ2VyO1xuIl19