"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addFilter;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _helpers = require("../helpers");

/**
 * Filter results - Adds to current filter value
 *
 * Will trigger new search
 *
 * @param name String field name to filter on
 * @param value String field value to filter on
 * @param type String (Optional) type of filter to apply
 */
function addFilter(name, value) {
  var _console;

  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "all";
  // eslint-disable-next-line no-console
  if (this.debug) (_console = console).log.apply(_console, ["Search UI: Action", "addFilter"].concat(Array.prototype.slice.call(arguments)));
  var filters = this.state.filters;
  var existingFilter = filters.find(function (f) {
    return f.field === name && f.type === type;
  }) || {};
  var allOtherFilters = filters.filter(function (f) {
    return f.field !== name || f.type !== type;
  }) || [];
  var existingFilterValues = existingFilter.values || [];
  var newFilterValues = existingFilterValues.find(function (existing) {
    return (0, _helpers.doFilterValuesMatch)(existing, value);
  }) ? existingFilterValues : existingFilterValues.concat(value);

  this._updateSearchResults({
    current: 1,
    filters: [].concat((0, _toConsumableArray2.default)(allOtherFilters), [{
      field: name,
      values: newFilterValues,
      type: type
    }])
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL2FkZEZpbHRlci5qcyJdLCJuYW1lcyI6WyJhZGRGaWx0ZXIiLCJuYW1lIiwidmFsdWUiLCJ0eXBlIiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwiYXJndW1lbnRzIiwiZmlsdGVycyIsInN0YXRlIiwiZXhpc3RpbmdGaWx0ZXIiLCJmaW5kIiwiZiIsImZpZWxkIiwiYWxsT3RoZXJGaWx0ZXJzIiwiZmlsdGVyIiwiZXhpc3RpbmdGaWx0ZXJWYWx1ZXMiLCJ2YWx1ZXMiLCJuZXdGaWx0ZXJWYWx1ZXMiLCJleGlzdGluZyIsImNvbmNhdCIsIl91cGRhdGVTZWFyY2hSZXN1bHRzIiwiY3VycmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7Ozs7Ozs7O0FBU2UsU0FBU0EsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUJDLEtBQXpCLEVBQThDO0FBQUE7O0FBQUEsTUFBZEMsSUFBYyx1RUFBUCxLQUFPO0FBQzNEO0FBQ0EsTUFBSSxLQUFLQyxLQUFULEVBQWdCLFlBQUFDLE9BQU8sRUFBQ0MsR0FBUixrQkFBWSxtQkFBWixFQUFpQyxXQUFqQyxvQ0FBaURDLFNBQWpEO0FBRjJDLE1BSW5EQyxPQUptRCxHQUl2QyxLQUFLQyxLQUprQyxDQUluREQsT0FKbUQ7QUFNM0QsTUFBTUUsY0FBYyxHQUNsQkYsT0FBTyxDQUFDRyxJQUFSLENBQWEsVUFBQUMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ0MsS0FBRixLQUFZWixJQUFaLElBQW9CVyxDQUFDLENBQUNULElBQUYsS0FBV0EsSUFBbkM7QUFBQSxHQUFkLEtBQTBELEVBRDVEO0FBRUEsTUFBTVcsZUFBZSxHQUNuQk4sT0FBTyxDQUFDTyxNQUFSLENBQWUsVUFBQUgsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ0MsS0FBRixLQUFZWixJQUFaLElBQW9CVyxDQUFDLENBQUNULElBQUYsS0FBV0EsSUFBbkM7QUFBQSxHQUFoQixLQUE0RCxFQUQ5RDtBQUVBLE1BQU1hLG9CQUFvQixHQUFHTixjQUFjLENBQUNPLE1BQWYsSUFBeUIsRUFBdEQ7QUFFQSxNQUFNQyxlQUFlLEdBQUdGLG9CQUFvQixDQUFDTCxJQUFyQixDQUEwQixVQUFBUSxRQUFRO0FBQUEsV0FDeEQsa0NBQW9CQSxRQUFwQixFQUE4QmpCLEtBQTlCLENBRHdEO0FBQUEsR0FBbEMsSUFHcEJjLG9CQUhvQixHQUlwQkEsb0JBQW9CLENBQUNJLE1BQXJCLENBQTRCbEIsS0FBNUIsQ0FKSjs7QUFNQSxPQUFLbUIsb0JBQUwsQ0FBMEI7QUFDeEJDLElBQUFBLE9BQU8sRUFBRSxDQURlO0FBRXhCZCxJQUFBQSxPQUFPLDZDQUNGTSxlQURFLElBRUw7QUFBRUQsTUFBQUEsS0FBSyxFQUFFWixJQUFUO0FBQWVnQixNQUFBQSxNQUFNLEVBQUVDLGVBQXZCO0FBQXdDZixNQUFBQSxJQUFJLEVBQUpBO0FBQXhDLEtBRks7QUFGaUIsR0FBMUI7QUFPRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRvRmlsdGVyVmFsdWVzTWF0Y2ggfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuXG4vKipcbiAqIEZpbHRlciByZXN1bHRzIC0gQWRkcyB0byBjdXJyZW50IGZpbHRlciB2YWx1ZVxuICpcbiAqIFdpbGwgdHJpZ2dlciBuZXcgc2VhcmNoXG4gKlxuICogQHBhcmFtIG5hbWUgU3RyaW5nIGZpZWxkIG5hbWUgdG8gZmlsdGVyIG9uXG4gKiBAcGFyYW0gdmFsdWUgU3RyaW5nIGZpZWxkIHZhbHVlIHRvIGZpbHRlciBvblxuICogQHBhcmFtIHR5cGUgU3RyaW5nIChPcHRpb25hbCkgdHlwZSBvZiBmaWx0ZXIgdG8gYXBwbHlcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRmlsdGVyKG5hbWUsIHZhbHVlLCB0eXBlID0gXCJhbGxcIikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBpZiAodGhpcy5kZWJ1ZykgY29uc29sZS5sb2coXCJTZWFyY2ggVUk6IEFjdGlvblwiLCBcImFkZEZpbHRlclwiLCAuLi5hcmd1bWVudHMpO1xuXG4gIGNvbnN0IHsgZmlsdGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICBjb25zdCBleGlzdGluZ0ZpbHRlciA9XG4gICAgZmlsdGVycy5maW5kKGYgPT4gZi5maWVsZCA9PT0gbmFtZSAmJiBmLnR5cGUgPT09IHR5cGUpIHx8IHt9O1xuICBjb25zdCBhbGxPdGhlckZpbHRlcnMgPVxuICAgIGZpbHRlcnMuZmlsdGVyKGYgPT4gZi5maWVsZCAhPT0gbmFtZSB8fCBmLnR5cGUgIT09IHR5cGUpIHx8IFtdO1xuICBjb25zdCBleGlzdGluZ0ZpbHRlclZhbHVlcyA9IGV4aXN0aW5nRmlsdGVyLnZhbHVlcyB8fCBbXTtcblxuICBjb25zdCBuZXdGaWx0ZXJWYWx1ZXMgPSBleGlzdGluZ0ZpbHRlclZhbHVlcy5maW5kKGV4aXN0aW5nID0+XG4gICAgZG9GaWx0ZXJWYWx1ZXNNYXRjaChleGlzdGluZywgdmFsdWUpXG4gIClcbiAgICA/IGV4aXN0aW5nRmlsdGVyVmFsdWVzXG4gICAgOiBleGlzdGluZ0ZpbHRlclZhbHVlcy5jb25jYXQodmFsdWUpO1xuXG4gIHRoaXMuX3VwZGF0ZVNlYXJjaFJlc3VsdHMoe1xuICAgIGN1cnJlbnQ6IDEsXG4gICAgZmlsdGVyczogW1xuICAgICAgLi4uYWxsT3RoZXJGaWx0ZXJzLFxuICAgICAgeyBmaWVsZDogbmFtZSwgdmFsdWVzOiBuZXdGaWx0ZXJWYWx1ZXMsIHR5cGUgfVxuICAgIF1cbiAgfSk7XG59XG4iXX0=